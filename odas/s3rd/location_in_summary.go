// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package s3rd

import (
	"fmt"
	"net/url"
	"strconv"
	"time"
)

// LocationInSummaryReq  位置进入汇总请求
type LocationInSummaryReq struct {
	Sid      []int64   `json:"sid,omitempty"`
	Start    time.Time `json:"start,omitempty"`
	End      time.Time `json:"end,omitempty"`
	Province string    `json:"province,omitempty"`
	Unknown  bool      `json:"unknown,omitempty"`
	Limit    int64     `json:"limit,omitempty"`
}

// Api 返回API路径
func (r *LocationInSummaryReq) Api() string {
	params := url.Values{}
	if len(r.Sid) > 0 {
		for _, id := range r.Sid {
			params.Add("sid", strconv.FormatInt(id, 10))
		}
	}
	if !r.Start.IsZero() {
		params.Add("start", r.Start.Format("2006-01-02 15:04:05"))
	}
	if !r.End.IsZero() {
		params.Add("end", r.End.Format("2006-01-02 15:04:05"))
	}
	if r.Province != "" {
		params.Add("province", r.Province)
	}
	if r.Unknown {
		params.Add("unknown", "true")
	}
	if r.Limit > 0 {
		params.Add("limit", strconv.FormatInt(r.Limit, 10))
	}
	return fmt.Sprintf("/v5/s3rd/parking/location-in-summary?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *LocationInSummaryReq) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *LocationInSummaryReq) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *LocationInSummaryReq) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *LocationInSummaryReq) AuthRequired() bool {
	return true
}

// LocationInSummaryResp  位置进入汇总响应
type LocationInSummaryResp struct {
	Summary      LocationInSummaryTotal   `json:"summary,omitempty"`
	CityList     []*LocationInSummaryList `json:"cityList,omitempty"`
	ProvinceList []*LocationInSummaryList `json:"provinceList,omitempty"`
}

// LocationInSummaryTotal  位置进入汇总总计
type LocationInSummaryTotal struct {
	Total           int64   `json:"total,omitempty"`
	ProvinceTotal   int64   `json:"provinceTotal,omitempty"`
	ProvincePercent float64 `json:"provincePercent,omitempty"`
	CityTotal       int64   `json:"cityTotal,omitempty"`
	CityPercent     float64 `json:"cityPercent,omitempty"`
}

// Params 将LocationInSummaryTotal转换为url.Values
func (p LocationInSummaryTotal) Params(prefix string) url.Values {
	params := url.Values{}
	if p.Total > 0 {
		params.Add(prefix+"total", strconv.FormatInt(p.Total, 10))
	}
	if p.ProvinceTotal > 0 {
		params.Add(prefix+"provinceTotal", strconv.FormatInt(p.ProvinceTotal, 10))
	}
	if p.ProvincePercent > 0 {
		params.Add(prefix+"provincePercent", fmt.Sprintf("%v", p.ProvincePercent))
	}
	if p.CityTotal > 0 {
		params.Add(prefix+"cityTotal", strconv.FormatInt(p.CityTotal, 10))
	}
	if p.CityPercent > 0 {
		params.Add(prefix+"cityPercent", fmt.Sprintf("%v", p.CityPercent))
	}
	return params
}

// LocationInSummaryList  位置进入汇总列表
type LocationInSummaryList struct {
	Location string  `json:"location,omitempty"`
	In       int64   `json:"in,omitempty"`
	Rate     float64 `json:"rate,omitempty"`
}

// Params 将LocationInSummaryList转换为url.Values
func (p LocationInSummaryList) Params(prefix string) url.Values {
	params := url.Values{}
	if p.Location != "" {
		params.Add(prefix+"location", p.Location)
	}
	if p.In > 0 {
		params.Add(prefix+"in", strconv.FormatInt(p.In, 10))
	}
	if p.Rate > 0 {
		params.Add(prefix+"rate", fmt.Sprintf("%v", p.Rate))
	}
	return params
}
