// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package s3rd

import (
	"fmt"
	"net/url"
	"strconv"
	"time"
)

// RmSaleSummaryReq  房间销售汇总请求
type RmSaleSummaryReq struct {
	Sid   []int64   `json:"sid,omitempty"`
	Start time.Time `json:"start,omitempty"`
	End   time.Time `json:"end,omitempty"`
}

// Api 返回API路径
func (r *RmSaleSummaryReq) Api() string {
	params := url.Values{}
	if len(r.Sid) > 0 {
		for _, id := range r.Sid {
			params.Add("sid", strconv.FormatInt(id, 10))
		}
	}
	if !r.Start.IsZero() {
		params.Add("start", r.Start.Format("2006-01-02 15:04:05"))
	}
	if !r.End.IsZero() {
		params.Add("end", r.End.Format("2006-01-02 15:04:05"))
	}
	return fmt.Sprintf("/v5/s3rd/lvyun-hotel/rm-sale-summary?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *RmSaleSummaryReq) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *RmSaleSummaryReq) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *RmSaleSummaryReq) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *RmSaleSummaryReq) AuthRequired() bool {
	return true
}

// RmSaleSummaryResp  房间销售汇总响应
type RmSaleSummaryResp struct {
	Total RmSaleSummary       `json:"total,omitempty"`
	List  []*RmSaleReportList `json:"list,omitempty"`
}

// RmSaleSummary  房间销售汇总
type RmSaleSummary struct {
	RoomsTotal float64 `json:"roomsTotal,omitempty"`
	RoomsOoo   float64 `json:"roomsOoo,omitempty"`
	RoomsOs    float64 `json:"roomsOs,omitempty"`
	RoomsHse   float64 `json:"roomsHse,omitempty"`
	RoomsAvl   float64 `json:"roomsAvl,omitempty"`
	RoomsVac   float64 `json:"roomsVac,omitempty"`
	SoldFit    float64 `json:"soldFit,omitempty"`
	SoldGrp    float64 `json:"soldGrp,omitempty"`
	SoldLong   float64 `json:"soldLong,omitempty"`
	SoldEnt    float64 `json:"soldEnt,omitempty"`
	RevFit     float64 `json:"revFit,omitempty"`
	RevGrp     float64 `json:"revGrp,omitempty"`
	RevLong    float64 `json:"revLong,omitempty"`
	PeopleFit  int64   `json:"peopleFit,omitempty"`
	PeopleGrp  int64   `json:"peopleGrp,omitempty"`
	PeopleLong int64   `json:"peopleLong,omitempty"`
}

// Params 将RmSaleSummary转换为url.Values
func (p RmSaleSummary) Params(prefix string) url.Values {
	params := url.Values{}
	if p.RoomsTotal > 0 {
		params.Add(prefix+"roomsTotal", fmt.Sprintf("%v", p.RoomsTotal))
	}
	if p.RoomsOoo > 0 {
		params.Add(prefix+"roomsOoo", fmt.Sprintf("%v", p.RoomsOoo))
	}
	if p.RoomsOs > 0 {
		params.Add(prefix+"roomsOs", fmt.Sprintf("%v", p.RoomsOs))
	}
	if p.RoomsHse > 0 {
		params.Add(prefix+"roomsHse", fmt.Sprintf("%v", p.RoomsHse))
	}
	if p.RoomsAvl > 0 {
		params.Add(prefix+"roomsAvl", fmt.Sprintf("%v", p.RoomsAvl))
	}
	if p.RoomsVac > 0 {
		params.Add(prefix+"roomsVac", fmt.Sprintf("%v", p.RoomsVac))
	}
	if p.SoldFit > 0 {
		params.Add(prefix+"soldFit", fmt.Sprintf("%v", p.SoldFit))
	}
	if p.SoldGrp > 0 {
		params.Add(prefix+"soldGrp", fmt.Sprintf("%v", p.SoldGrp))
	}
	if p.SoldLong > 0 {
		params.Add(prefix+"soldLong", fmt.Sprintf("%v", p.SoldLong))
	}
	if p.SoldEnt > 0 {
		params.Add(prefix+"soldEnt", fmt.Sprintf("%v", p.SoldEnt))
	}
	if p.RevFit > 0 {
		params.Add(prefix+"revFit", fmt.Sprintf("%v", p.RevFit))
	}
	if p.RevGrp > 0 {
		params.Add(prefix+"revGrp", fmt.Sprintf("%v", p.RevGrp))
	}
	if p.RevLong > 0 {
		params.Add(prefix+"revLong", fmt.Sprintf("%v", p.RevLong))
	}
	if p.PeopleFit > 0 {
		params.Add(prefix+"peopleFit", strconv.FormatInt(p.PeopleFit, 10))
	}
	if p.PeopleGrp > 0 {
		params.Add(prefix+"peopleGrp", strconv.FormatInt(p.PeopleGrp, 10))
	}
	if p.PeopleLong > 0 {
		params.Add(prefix+"peopleLong", strconv.FormatInt(p.PeopleLong, 10))
	}
	return params
}

// RmSaleReportList  房间销售报告列表
type RmSaleReportList struct {
	Date    string        `json:"date,omitempty"`
	Summary RmSaleSummary `json:"summary,omitempty"`
}

// Params 将RmSaleReportList转换为url.Values
func (p RmSaleReportList) Params(prefix string) url.Values {
	params := url.Values{}
	if p.Date != "" {
		params.Add(prefix+"date", p.Date)
	}
	for key, values := range p.Summary.Params(prefix + "summary.") {
		for _, value := range values {
			params.Add(key, value)
		}
	}
	return params
}
