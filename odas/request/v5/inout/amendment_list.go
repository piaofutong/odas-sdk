// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package inout

import (
	"fmt"
	"net/url"
	"strconv"
)

// AmendmentListReq AmendmentList请求
type AmendmentListReq struct {
	Sid int64 `json:"sid,omitempty"`
	Switch int `json:"switch,omitempty"`
	Page int64 `json:"page,omitempty"`
	PageSize int64 `json:"pageSize,omitempty"`

}

// Api 返回API路径
func (r *AmendmentListReq) Api() string {
	params := url.Values{}
	if r.Sid > 0 {
		params.Add("sid", strconv.FormatInt(r.Sid, 10))
	}
	if r.Switch > 0 {
		params.Add("switch", strconv.Itoa(r.Switch))
	}
	if r.Page > 0 {
		params.Add("page", strconv.FormatInt(r.Page, 10))
	}
	if r.PageSize > 0 {
		params.Add("pageSize", strconv.FormatInt(r.PageSize, 10))
	}
	return fmt.Sprintf("/v5/inout/amendment/list?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *AmendmentListReq) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *AmendmentListReq) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *AmendmentListReq) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *AmendmentListReq) AuthRequired() bool {
	return true
}


// AmendmentListResp AmendmentList响应
type AmendmentListResp struct {
	List []*AmendmentGetResponse `json:"list,omitempty"`
	Pagination *AmendmentPagination `json:"pagination,omitempty"`

}



// AmendmentGetResponse AmendmentGet响应
type AmendmentGetResponse struct {
	Id int64 `json:"id,omitempty"`
	Gid int64 `json:"gid,omitempty"`
	Switch int64 `json:"switch,omitempty"`
	Type int64 `json:"type,omitempty"`
	InPlus int64 `json:"inPlus,omitempty"`
	OutPlus int64 `json:"outPlus,omitempty"`
	InCoefficient float32 `json:"inCoefficient,omitempty"`
	OutCoefficient float32 `json:"outCoefficient,omitempty"`
	DownTime string `json:"downTime,omitempty"`
	CreatedAt string `json:"createdAt,omitempty"`
	UpdatedAt string `json:"updatedAt,omitempty"`

}

// Params 将AmendmentGetResponse转换为url.Values
func (p AmendmentGetResponse) Params(prefix string) url.Values {
	params := url.Values{}
	if p.Id > 0 {
		params.Add(prefix+"id", strconv.FormatInt(p.Id, 10))
	}
	if p.Gid > 0 {
		params.Add(prefix+"gid", strconv.FormatInt(p.Gid, 10))
	}
	if p.Switch > 0 {
		params.Add(prefix+"switch", strconv.FormatInt(p.Switch, 10))
	}
	if p.Type > 0 {
		params.Add(prefix+"type", strconv.FormatInt(p.Type, 10))
	}
	if p.InPlus > 0 {
		params.Add(prefix+"inPlus", strconv.FormatInt(p.InPlus, 10))
	}
	if p.OutPlus > 0 {
		params.Add(prefix+"outPlus", strconv.FormatInt(p.OutPlus, 10))
	}
	if p.InCoefficient > 0 {
		params.Add(prefix+"inCoefficient", fmt.Sprintf("%v", p.InCoefficient))
	}
	if p.OutCoefficient > 0 {
		params.Add(prefix+"outCoefficient", fmt.Sprintf("%v", p.OutCoefficient))
	}
	if p.DownTime != "" {
		params.Add(prefix+"downTime", p.DownTime)
	}
	if p.CreatedAt != "" {
		params.Add(prefix+"createdAt", p.CreatedAt)
	}
	if p.UpdatedAt != "" {
		params.Add(prefix+"updatedAt", p.UpdatedAt)
	}
	return params
}


// AmendmentPagination AmendmentPagination
type AmendmentPagination struct {
	Page int64 `json:"page,omitempty"`
	PageSize int64 `json:"pageSize,omitempty"`
	Total int64 `json:"total,omitempty"`
	Pages int64 `json:"pages,omitempty"`

}

// Params 将AmendmentPagination转换为url.Values
func (p AmendmentPagination) Params(prefix string) url.Values {
	params := url.Values{}
	if p.Page > 0 {
		params.Add(prefix+"page", strconv.FormatInt(p.Page, 10))
	}
	if p.PageSize > 0 {
		params.Add(prefix+"pageSize", strconv.FormatInt(p.PageSize, 10))
	}
	if p.Total > 0 {
		params.Add(prefix+"total", strconv.FormatInt(p.Total, 10))
	}
	if p.Pages > 0 {
		params.Add(prefix+"pages", strconv.FormatInt(p.Pages, 10))
	}
	return params
}


