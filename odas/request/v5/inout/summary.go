// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package inout

import (
	"fmt"
	"net/url"
	"strconv"

	"github.com/piaofutong/odas-sdk/odas/request/common"
)

// SummaryReq Summary请求
type SummaryReq struct {
	Request common.PassedTimeSpanRequest `json:"request,omitempty"`
	Gid     []int                        `json:"gid,omitempty"`
	Amend   *AmendConfig                 `json:"amend,omitempty"`
}

// Api 返回API路径
func (r *SummaryReq) Api() string {
	params := url.Values{}

	requestParams := r.Request.Params("")
	for key, values := range requestParams {
		for _, value := range values {
			params.Add(key, value)
		}
	}

	if len(r.Gid) > 0 {
		for _, id := range r.Gid {
			params.Add("gid", strconv.Itoa(id))
		}
	}
	if r.Amend != nil {
		for key, values := range r.Amend.Params("amend.") {
			for _, value := range values {
				params.Add(key, value)
			}
		}
	}
	return fmt.Sprintf("/v5/inout/stat/g-hour/summary?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *SummaryReq) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *SummaryReq) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *SummaryReq) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *SummaryReq) AuthRequired() bool {
	return true
}

// SummaryResp Summary响应
type SummaryResp struct {
	Total SummaryTotal         `json:"total,omitempty"`
	List  []*SummaryByHourList `json:"list,omitempty"`
}

// AmendConfig AmendConfig
type AmendConfig struct {
	NoAmend    bool `json:"noAmend,omitempty"`
	NoEmployee bool `json:"haveEmployee,omitempty"`
}

// Params 将AmendConfig转换为url.Values
func (p AmendConfig) Params(prefix string) url.Values {
	params := url.Values{}
	if p.NoAmend {
		params.Add(prefix+"noAmend", strconv.FormatBool(p.NoAmend))
	}
	if p.NoEmployee {
		params.Add(prefix+"haveEmployee", strconv.FormatBool(p.NoEmployee))
	}
	return params
}

// SummaryTotal SummaryTotal
type SummaryTotal struct {
	In   int64 `json:"in,omitempty"`
	Out  int64 `json:"out,omitempty"`
	Hold int64 `json:"hold,omitempty"`
}

// Params 将SummaryTotal转换为url.Values
func (p SummaryTotal) Params(prefix string) url.Values {
	params := url.Values{}
	if p.In > 0 {
		params.Add(prefix+"in", strconv.FormatInt(p.In, 10))
	}
	if p.Out > 0 {
		params.Add(prefix+"out", strconv.FormatInt(p.Out, 10))
	}
	if p.Hold > 0 {
		params.Add(prefix+"hold", strconv.FormatInt(p.Hold, 10))
	}
	return params
}

// SummaryByHourList SummaryByHourList
type SummaryByHourList struct {
	Hour    int64          `json:"hour,omitempty"`
	Summary ProductSummary `json:"summary,omitempty"`
}

// Params 将SummaryByHourList转换为url.Values
func (p SummaryByHourList) Params(prefix string) url.Values {
	params := url.Values{}
	if p.Hour > 0 {
		params.Add(prefix+"hour", strconv.FormatInt(p.Hour, 10))
	}
	for key, values := range p.Summary.Params(prefix + "summary.") {
		for _, value := range values {
			params.Add(key, value)
		}
	}
	return params
}

// ProductSummary ProductSummary
type ProductSummary struct {
	TicketCount int64 `json:"ticketCount,omitempty"`
	Amount      int64 `json:"amount,omitempty"`
}

// Params 将ProductSummary转换为url.Values
func (p ProductSummary) Params(prefix string) url.Values {
	params := url.Values{}
	if p.TicketCount > 0 {
		params.Add(prefix+"ticketCount", strconv.FormatInt(p.TicketCount, 10))
	}
	if p.Amount > 0 {
		params.Add(prefix+"amount", strconv.FormatInt(p.Amount, 10))
	}
	return params
}
