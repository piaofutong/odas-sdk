// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package basic_analyze

import (
	"fmt"
	"net/url"
	"github.com/piaofutong/odas-sdk/odas/request/common"
	"github.com/piaofutong/odas-sdk/odas/request/types"
	"strconv"
)

// RefundSummaryByLevel2Req RefundSummaryByLevel2请求
type RefundSummaryByLevel2Req struct {
	Request *common.PassedTimeSpanV4Request `json:"request,omitempty"`
	Limit int64 `json:"limit,omitempty"`
	OrderType types.OrderType `json:"orderType,omitempty"`

}

// Api 返回API路径
func (r *RefundSummaryByLevel2Req) Api() string {
	params := url.Values{}
	if r.Request != nil {
		requestParams := r.Request.Params("")
		for key, values := range requestParams {
			for _, value := range values {
				params.Add(key, value)
			}
		}
	}

	if r.Limit > 0 {
		params.Add("limit", strconv.FormatInt(r.Limit, 10))
	}
	if r.OrderType > 0 {
		params.Add("orderType", strconv.FormatInt(int64(r.OrderType), 10))
	}
	return fmt.Sprintf("/v5/basic_analyze/channel/g-level2/refund-summary?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *RefundSummaryByLevel2Req) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *RefundSummaryByLevel2Req) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *RefundSummaryByLevel2Req) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *RefundSummaryByLevel2Req) AuthRequired() bool {
	return true
}


// RefundSummaryByLevel2Resp RefundSummaryByLevel2响应
type RefundSummaryByLevel2Resp struct {
	Total ChannelRefundSummary `json:"total,omitempty"`
	List []*RefundSummaryByLevel2List `json:"list,omitempty"`

}



// ChannelRefundSummary ChannelRefundSummary
type ChannelRefundSummary struct {
	PayTicketNum int64 `json:"payTicketNum,omitempty"`
	CancelTicketNum int64 `json:"cancelTicketNum,omitempty"`
	RevokeTicketNum int64 `json:"revokeTicketNum,omitempty"`
	AfterSaleTicketNum int64 `json:"afterSaleTicketNum,omitempty"`

}

// Params 将ChannelRefundSummary转换为url.Values
func (p ChannelRefundSummary) Params(prefix string) url.Values {
	params := url.Values{}
	if p.PayTicketNum > 0 {
		params.Add(prefix+"payTicketNum", strconv.FormatInt(p.PayTicketNum, 10))
	}
	if p.CancelTicketNum > 0 {
		params.Add(prefix+"cancelTicketNum", strconv.FormatInt(p.CancelTicketNum, 10))
	}
	if p.RevokeTicketNum > 0 {
		params.Add(prefix+"revokeTicketNum", strconv.FormatInt(p.RevokeTicketNum, 10))
	}
	if p.AfterSaleTicketNum > 0 {
		params.Add(prefix+"afterSaleTicketNum", strconv.FormatInt(p.AfterSaleTicketNum, 10))
	}
	return params
}


// RefundSummaryByLevel2List RefundSummaryByLevel2List
type RefundSummaryByLevel2List struct {
	ChannelLevel2Id int64 `json:"channelLevel2Id,omitempty"`
	ChannelLevel2Name string `json:"channelLevel2Name,omitempty"`
	Summary ChannelRefundSummary `json:"summary,omitempty"`
	RefundCountRate float64 `json:"refundCountRate,omitempty"`

}

// Params 将RefundSummaryByLevel2List转换为url.Values
func (p RefundSummaryByLevel2List) Params(prefix string) url.Values {
	params := url.Values{}
	if p.ChannelLevel2Id > 0 {
		params.Add(prefix+"channelLevel2Id", strconv.FormatInt(p.ChannelLevel2Id, 10))
	}
	if p.ChannelLevel2Name != "" {
		params.Add(prefix+"channelLevel2Name", p.ChannelLevel2Name)
	}
	for key, values := range p.Summary.Params(prefix+"summary.") {
		for _, value := range values {
			params.Add(key, value)
		}
	}
	if p.RefundCountRate > 0 {
		params.Add(prefix+"refundCountRate", fmt.Sprintf("%v", p.RefundCountRate))
	}
	return params
}


