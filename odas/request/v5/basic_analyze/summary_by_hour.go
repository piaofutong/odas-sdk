// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package basic_analyze

import (
	"fmt"
	"net/url"
	"github.com/piaofutong/odas-sdk/odas/request/common"
	"strconv"
)

// SummaryByHourReq SummaryByHour请求
type SummaryByHourReq struct {
	Request common.PassedTimeSpanV4Request `json:"request,omitempty"`
	TerminalType []int64 `json:"terminalType,omitempty"`

}

// Api 返回API路径
func (r *SummaryByHourReq) Api() string {
	params := url.Values{}

	requestParams := r.Request.Params("")
	for key, values := range requestParams {
		for _, value := range values {
			params.Add(key, value)
		}
	}

	if len(r.TerminalType) > 0 {
		for _, id := range r.TerminalType {
			params.Add("terminalType", strconv.FormatInt(id, 10))
		}
	}
	return fmt.Sprintf("/v5/basic_analyze/product/g-hour/summary?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *SummaryByHourReq) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *SummaryByHourReq) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *SummaryByHourReq) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *SummaryByHourReq) AuthRequired() bool {
	return true
}


// SummaryByHourResp SummaryByHour响应
type SummaryByHourResp struct {
	Total ProductSummary `json:"total,omitempty"`
	List []*SummaryByHourList `json:"list,omitempty"`

}



// ProductSummary ProductSummary
type ProductSummary struct {
	TicketCount int64 `json:"ticketCount,omitempty"`
	Amount int64 `json:"amount,omitempty"`

}

// Params 将ProductSummary转换为url.Values
func (p ProductSummary) Params(prefix string) url.Values {
	params := url.Values{}
	if p.TicketCount > 0 {
		params.Add(prefix+"ticketCount", strconv.FormatInt(p.TicketCount, 10))
	}
	if p.Amount > 0 {
		params.Add(prefix+"amount", strconv.FormatInt(p.Amount, 10))
	}
	return params
}


// SummaryByHourList SummaryByHourList
type SummaryByHourList struct {
	Hour int64 `json:"hour,omitempty"`
	Summary ProductSummary `json:"summary,omitempty"`

}

// Params 将SummaryByHourList转换为url.Values
func (p SummaryByHourList) Params(prefix string) url.Values {
	params := url.Values{}
	if p.Hour > 0 {
		params.Add(prefix+"hour", strconv.FormatInt(p.Hour, 10))
	}
	for key, values := range p.Summary.Params(prefix+"summary.") {
		for _, value := range values {
			params.Add(key, value)
		}
	}
	return params
}


