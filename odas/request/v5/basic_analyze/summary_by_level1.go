// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package basic_analyze

import (
	"fmt"
	"net/url"
	"github.com/piaofutong/odas-sdk/odas/request/common"
	"github.com/piaofutong/odas-sdk/odas/request/types"
	"strconv"
	"time"
)

// SummaryByLevel1Req SummaryByLevel1请求
type SummaryByLevel1Req struct {
	Request *common.PassedTimeSpanV4Request `json:"request,omitempty"`
	Limit int64 `json:"limit,omitempty"`
	OrderType types.OrderType `json:"orderType,omitempty"`

}

// Api 返回API路径
func (r *SummaryByLevel1Req) Api() string {
	params := url.Values{}
	if r.Request != nil {
		requestParams := r.Request.Params("")
		for key, values := range requestParams {
			for _, value := range values {
				params.Add(key, value)
			}
		}
	}

	if r.Limit > 0 {
		params.Add("limit", strconv.FormatInt(r.Limit, 10))
	}
	if r.OrderType > 0 {
		params.Add("orderType", strconv.FormatInt(int64(r.OrderType), 10))
	}
	return fmt.Sprintf("/v5/basic_analyze/channel/g-level1/summary?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *SummaryByLevel1Req) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *SummaryByLevel1Req) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *SummaryByLevel1Req) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *SummaryByLevel1Req) AuthRequired() bool {
	return true
}


// SummaryByLevel1Resp SummaryByLevel1响应
type SummaryByLevel1Resp struct {
	List []*SummaryByLevel1List `json:"list,omitempty"`

}



// PassedTimeSpanV4Request PassedTimeSpanV4请求
type PassedTimeSpanV4Request struct {
	Lid []int `json:"lid,omitempty"`
	ExcludeLid []int `json:"excludeLid,omitempty"`

}

// Params 将PassedTimeSpanV4Request转换为url.Values
func (p PassedTimeSpanV4Request) Params(prefix string) url.Values {
	params := url.Values{}
	if len(p.Lid) > 0 {
		for _, item := range p.Lid {
		params.Add(prefix+"lid", strconv.Itoa(item))
	}
	}
	if len(p.ExcludeLid) > 0 {
		for _, item := range p.ExcludeLid {
		params.Add(prefix+"excludeLid", strconv.Itoa(item))
	}
	}
	return params
}


// PassedTimeSpanRequest PassedTimeSpan请求
type PassedTimeSpanRequest struct {
	Sid []int `json:"sid,omitempty"`

}

// Params 将PassedTimeSpanRequest转换为url.Values
func (p PassedTimeSpanRequest) Params(prefix string) url.Values {
	params := url.Values{}
	if len(p.Sid) > 0 {
		for _, item := range p.Sid {
		params.Add(prefix+"sid", strconv.Itoa(item))
	}
	}
	return params
}


// TimeSpan TimeSpan
type TimeSpan struct {
	Start time.Time `json:"start,omitempty"`
	End time.Time `json:"end,omitempty"`
	Type types.TimeFilterType `json:"type,omitempty"`
	IntervalDays int `json:"intervalDays,omitempty"`

}

// Params 将TimeSpan转换为url.Values
func (p TimeSpan) Params(prefix string) url.Values {
	params := url.Values{}
	if !p.Start.IsZero() {
		params.Add(prefix+"start", p.Start.Format("2006-01-02 15:04:05"))
	}
	if !p.End.IsZero() {
		params.Add(prefix+"end", p.End.Format("2006-01-02 15:04:05"))
	}
	if p.Type > 0 {
		params.Add(prefix+"type", strconv.FormatInt(int64(p.Type), 10))
	}
	if p.IntervalDays > 0 {
		params.Add(prefix+"intervalDays", strconv.Itoa(p.IntervalDays))
	}
	return params
}


// SummaryByLevel1List SummaryByLevel1List
type SummaryByLevel1List struct {
	ChannelLevel1Id int64 `json:"channelLevel1Id,omitempty"`
	ChannelLevel1Name string `json:"channelLevel1Name,omitempty"`
	Summary ChannelSummary `json:"summary,omitempty"`
	TicketCountRate float64 `json:"ticketCountRate,omitempty"`

}

// Params 将SummaryByLevel1List转换为url.Values
func (p SummaryByLevel1List) Params(prefix string) url.Values {
	params := url.Values{}
	if p.ChannelLevel1Id > 0 {
		params.Add(prefix+"channelLevel1Id", strconv.FormatInt(p.ChannelLevel1Id, 10))
	}
	if p.ChannelLevel1Name != "" {
		params.Add(prefix+"channelLevel1Name", p.ChannelLevel1Name)
	}
	for key, values := range p.Summary.Params(prefix+"summary.") {
		for _, value := range values {
			params.Add(key, value)
		}
	}
	if p.TicketCountRate > 0 {
		params.Add(prefix+"ticketCountRate", fmt.Sprintf("%v", p.TicketCountRate))
	}
	return params
}


// ChannelSummary ChannelSummary
type ChannelSummary struct {
	OrderCount int64 `json:"orderCount,omitempty"`
	TicketCount int64 `json:"ticketCount,omitempty"`
	Amount int64 `json:"amount,omitempty"`

}

// Params 将ChannelSummary转换为url.Values
func (p ChannelSummary) Params(prefix string) url.Values {
	params := url.Values{}
	if p.OrderCount > 0 {
		params.Add(prefix+"orderCount", strconv.FormatInt(p.OrderCount, 10))
	}
	if p.TicketCount > 0 {
		params.Add(prefix+"ticketCount", strconv.FormatInt(p.TicketCount, 10))
	}
	if p.Amount > 0 {
		params.Add(prefix+"amount", strconv.FormatInt(p.Amount, 10))
	}
	return params
}


