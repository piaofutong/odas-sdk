// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package basic_analyze

import (
	"fmt"
	"net/url"
	"github.com/piaofutong/odas-sdk/odas/request/common"
	"strconv"
)

// SummaryByTicketAndChannelReq SummaryByTicketAndChannel请求
type SummaryByTicketAndChannelReq struct {
	Request common.PassedTimeSpanV4Request `json:"request,omitempty"`
	TicketId []int64 `json:"ticketId,omitempty"`

}

// Api 返回API路径
func (r *SummaryByTicketAndChannelReq) Api() string {
	params := url.Values{}

	requestParams := r.Request.Params("")
	for key, values := range requestParams {
		for _, value := range values {
			params.Add(key, value)
		}
	}

	if len(r.TicketId) > 0 {
		for _, id := range r.TicketId {
			params.Add("ticketId", strconv.FormatInt(id, 10))
		}
	}
	return fmt.Sprintf("/v5/basic_analyze/product/g-ticket-channel/summary?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *SummaryByTicketAndChannelReq) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *SummaryByTicketAndChannelReq) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *SummaryByTicketAndChannelReq) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *SummaryByTicketAndChannelReq) AuthRequired() bool {
	return true
}


// SummaryByTicketAndChannelResp SummaryByTicketAndChannel响应
type SummaryByTicketAndChannelResp struct {
	List []*SummaryByTicketAndChannelList `json:"list,omitempty"`

}



// SummaryByTicketAndChannelList SummaryByTicketAndChannelList
type SummaryByTicketAndChannelList struct {
	TicketId int64 `json:"ticketId,omitempty"`
	TicketName string `json:"ticketName,omitempty"`
	ChannelId int64 `json:"channelId,omitempty"`
	ChannelName string `json:"channelName,omitempty"`
	TicketCount int64 `json:"ticketCount,omitempty"`
	TicketCountRate float64 `json:"ticketCountRate,omitempty"`

}

// Params 将SummaryByTicketAndChannelList转换为url.Values
func (p SummaryByTicketAndChannelList) Params(prefix string) url.Values {
	params := url.Values{}
	if p.TicketId > 0 {
		params.Add(prefix+"ticketId", strconv.FormatInt(p.TicketId, 10))
	}
	if p.TicketName != "" {
		params.Add(prefix+"ticketName", p.TicketName)
	}
	if p.ChannelId > 0 {
		params.Add(prefix+"channelId", strconv.FormatInt(p.ChannelId, 10))
	}
	if p.ChannelName != "" {
		params.Add(prefix+"channelName", p.ChannelName)
	}
	if p.TicketCount > 0 {
		params.Add(prefix+"ticketCount", strconv.FormatInt(p.TicketCount, 10))
	}
	if p.TicketCountRate > 0 {
		params.Add(prefix+"ticketCountRate", fmt.Sprintf("%v", p.TicketCountRate))
	}
	return params
}


