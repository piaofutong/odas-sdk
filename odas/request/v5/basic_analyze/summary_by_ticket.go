// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package basic_analyze

import (
	"fmt"
	"net/url"
	"github.com/piaofutong/odas-sdk/odas/request/common"
	"strconv"
)

// SummaryByTicketReq SummaryByTicket请求
type SummaryByTicketReq struct {
	Request common.PassedTimeSpanByOrderTypeV4Request `json:"request,omitempty"`
	Compare *common.PassedTimeBetween `json:"compare,omitempty"`
	Page int64 `json:"page,omitempty"`
	PageSize int64 `json:"pageSize,omitempty"`

}

// Api 返回API路径
func (r *SummaryByTicketReq) Api() string {
	params := url.Values{}

	requestParams := r.Request.Params("")
	for key, values := range requestParams {
		for _, value := range values {
			params.Add(key, value)
		}
	}

	if r.Compare != nil {
		for key, values := range r.Compare.Params("compare.") {
			for _, value := range values {
				params.Add(key, value)
			}
		}
	}
	if r.Page > 0 {
		params.Add("page", strconv.FormatInt(r.Page, 10))
	}
	if r.PageSize > 0 {
		params.Add("pageSize", strconv.FormatInt(r.PageSize, 10))
	}
	return fmt.Sprintf("/v5/basic_analyze/product/g-ticket/summary?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *SummaryByTicketReq) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *SummaryByTicketReq) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *SummaryByTicketReq) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *SummaryByTicketReq) AuthRequired() bool {
	return true
}


// SummaryByTicketResp SummaryByTicket响应
type SummaryByTicketResp struct {
	Pagination common.Pagination `json:"pagination,omitempty"`
	List []*SummaryByTicketList `json:"list,omitempty"`

}



// SummaryByTicketList SummaryByTicketList
type SummaryByTicketList struct {
	TicketId int64 `json:"ticketId,omitempty"`
	TicketName string `json:"ticketName,omitempty"`
	Summary ProductSummary `json:"summary,omitempty"`
	CompareRate ProductSummaryRate `json:"compareRate,omitempty"`

}

// Params 将SummaryByTicketList转换为url.Values
func (p SummaryByTicketList) Params(prefix string) url.Values {
	params := url.Values{}
	if p.TicketId > 0 {
		params.Add(prefix+"ticketId", strconv.FormatInt(p.TicketId, 10))
	}
	if p.TicketName != "" {
		params.Add(prefix+"ticketName", p.TicketName)
	}
	for key, values := range p.Summary.Params(prefix+"summary.") {
		for _, value := range values {
			params.Add(key, value)
		}
	}
	for key, values := range p.CompareRate.Params(prefix+"compareRate.") {
		for _, value := range values {
			params.Add(key, value)
		}
	}
	return params
}


// ProductSummaryRate ProductSummaryRate
type ProductSummaryRate struct {
	TicketCount float64 `json:"ticketCount,omitempty"`
	Amount float64 `json:"amount,omitempty"`

}

// Params 将ProductSummaryRate转换为url.Values
func (p ProductSummaryRate) Params(prefix string) url.Values {
	params := url.Values{}
	if p.TicketCount > 0 {
		params.Add(prefix+"ticketCount", fmt.Sprintf("%v", p.TicketCount))
	}
	if p.Amount > 0 {
		params.Add(prefix+"amount", fmt.Sprintf("%v", p.Amount))
	}
	return params
}


