// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package basic_analyze

import (
	"fmt"
	"net/url"
	"github.com/piaofutong/odas-sdk/odas/request/common"
	"strconv"
)

// AnnualCardSummaryReq AnnualCardSummary请求
type AnnualCardSummaryReq struct {
	Request common.PassedTimeSpanV4Request `json:"request,omitempty"`
	Limit int64 `json:"limit,omitempty"`

}

// Api 返回API路径
func (r *AnnualCardSummaryReq) Api() string {
	params := url.Values{}

	requestParams := r.Request.Params("")
	for key, values := range requestParams {
		for _, value := range values {
			params.Add(key, value)
		}
	}

	if r.Limit > 0 {
		params.Add("limit", strconv.FormatInt(r.Limit, 10))
	}
	return fmt.Sprintf("/v5/basic_analyze/report/g-annualcard/summary?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *AnnualCardSummaryReq) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *AnnualCardSummaryReq) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *AnnualCardSummaryReq) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *AnnualCardSummaryReq) AuthRequired() bool {
	return true
}


// AnnualCardSummaryResp AnnualCardSummary响应
type AnnualCardSummaryResp struct {
	Total AnnualCardSummary `json:"total,omitempty"`
	List []*AnnualCardSummaryList `json:"list,omitempty"`

}



// AnnualCardSummary AnnualCardSummary
type AnnualCardSummary struct {
	OrderNum int64 `json:"orderNum,omitempty"`
	OrderTicket int64 `json:"orderTicket,omitempty"`
	OrderCostMoney int64 `json:"orderCostMoney,omitempty"`
	OrderSaleMoney int64 `json:"orderSaleMoney,omitempty"`
	CancelNum int64 `json:"cancelNum,omitempty"`
	CancelTicket int64 `json:"cancelTicket,omitempty"`
	CancelCostMoney int64 `json:"cancelCostMoney,omitempty"`
	CancelSaleMoney int64 `json:"cancelSaleMoney,omitempty"`
	VerifyNum int64 `json:"verifyNum,omitempty"`
	VerifyTicket int64 `json:"verifyTicket,omitempty"`
	VerifyCostMoney int64 `json:"verifyCostMoney,omitempty"`
	VerifySaleMoney int64 `json:"verifySaleMoney,omitempty"`
	SaleOrderNum int64 `json:"saleOrderNum,omitempty"`
	SaleOrderTicket int64 `json:"saleOrderTicket,omitempty"`
	SaleOrderCostMoney int64 `json:"saleOrderCostMoney,omitempty"`
	SaleOrderSaleMoney int64 `json:"saleOrderSaleMoney,omitempty"`
	RenewOrderNum int64 `json:"renewOrderNum,omitempty"`
	RenewOrderTicket int64 `json:"renewOrderTicket,omitempty"`
	RenewOrderCostMoney int64 `json:"renewOrderCostMoney,omitempty"`
	RenewOrderSaleMoney int64 `json:"renewOrderSaleMoney,omitempty"`
	AdjustOrderNum int64 `json:"adjustOrderNum,omitempty"`
	AdjustOrderTicket int64 `json:"adjustOrderTicket,omitempty"`
	AdjustOrderCostMoney int64 `json:"adjustOrderCostMoney,omitempty"`
	AdjustOrderSaleMoney int64 `json:"adjustOrderSaleMoney,omitempty"`
	ActivateOrderNum int64 `json:"activateOrderNum,omitempty"`
	ActivateOrderTicket int64 `json:"activateOrderTicket,omitempty"`
	ActivateOrderCostMoney int64 `json:"activateOrderCostMoney,omitempty"`
	ActivateOrderSaleMoney int64 `json:"activateOrderSaleMoney,omitempty"`

}

// Params 将AnnualCardSummary转换为url.Values
func (p AnnualCardSummary) Params(prefix string) url.Values {
	params := url.Values{}
	if p.OrderNum > 0 {
		params.Add(prefix+"orderNum", strconv.FormatInt(p.OrderNum, 10))
	}
	if p.OrderTicket > 0 {
		params.Add(prefix+"orderTicket", strconv.FormatInt(p.OrderTicket, 10))
	}
	if p.OrderCostMoney > 0 {
		params.Add(prefix+"orderCostMoney", strconv.FormatInt(p.OrderCostMoney, 10))
	}
	if p.OrderSaleMoney > 0 {
		params.Add(prefix+"orderSaleMoney", strconv.FormatInt(p.OrderSaleMoney, 10))
	}
	if p.CancelNum > 0 {
		params.Add(prefix+"cancelNum", strconv.FormatInt(p.CancelNum, 10))
	}
	if p.CancelTicket > 0 {
		params.Add(prefix+"cancelTicket", strconv.FormatInt(p.CancelTicket, 10))
	}
	if p.CancelCostMoney > 0 {
		params.Add(prefix+"cancelCostMoney", strconv.FormatInt(p.CancelCostMoney, 10))
	}
	if p.CancelSaleMoney > 0 {
		params.Add(prefix+"cancelSaleMoney", strconv.FormatInt(p.CancelSaleMoney, 10))
	}
	if p.VerifyNum > 0 {
		params.Add(prefix+"verifyNum", strconv.FormatInt(p.VerifyNum, 10))
	}
	if p.VerifyTicket > 0 {
		params.Add(prefix+"verifyTicket", strconv.FormatInt(p.VerifyTicket, 10))
	}
	if p.VerifyCostMoney > 0 {
		params.Add(prefix+"verifyCostMoney", strconv.FormatInt(p.VerifyCostMoney, 10))
	}
	if p.VerifySaleMoney > 0 {
		params.Add(prefix+"verifySaleMoney", strconv.FormatInt(p.VerifySaleMoney, 10))
	}
	if p.SaleOrderNum > 0 {
		params.Add(prefix+"saleOrderNum", strconv.FormatInt(p.SaleOrderNum, 10))
	}
	if p.SaleOrderTicket > 0 {
		params.Add(prefix+"saleOrderTicket", strconv.FormatInt(p.SaleOrderTicket, 10))
	}
	if p.SaleOrderCostMoney > 0 {
		params.Add(prefix+"saleOrderCostMoney", strconv.FormatInt(p.SaleOrderCostMoney, 10))
	}
	if p.SaleOrderSaleMoney > 0 {
		params.Add(prefix+"saleOrderSaleMoney", strconv.FormatInt(p.SaleOrderSaleMoney, 10))
	}
	if p.RenewOrderNum > 0 {
		params.Add(prefix+"renewOrderNum", strconv.FormatInt(p.RenewOrderNum, 10))
	}
	if p.RenewOrderTicket > 0 {
		params.Add(prefix+"renewOrderTicket", strconv.FormatInt(p.RenewOrderTicket, 10))
	}
	if p.RenewOrderCostMoney > 0 {
		params.Add(prefix+"renewOrderCostMoney", strconv.FormatInt(p.RenewOrderCostMoney, 10))
	}
	if p.RenewOrderSaleMoney > 0 {
		params.Add(prefix+"renewOrderSaleMoney", strconv.FormatInt(p.RenewOrderSaleMoney, 10))
	}
	if p.AdjustOrderNum > 0 {
		params.Add(prefix+"adjustOrderNum", strconv.FormatInt(p.AdjustOrderNum, 10))
	}
	if p.AdjustOrderTicket > 0 {
		params.Add(prefix+"adjustOrderTicket", strconv.FormatInt(p.AdjustOrderTicket, 10))
	}
	if p.AdjustOrderCostMoney > 0 {
		params.Add(prefix+"adjustOrderCostMoney", strconv.FormatInt(p.AdjustOrderCostMoney, 10))
	}
	if p.AdjustOrderSaleMoney > 0 {
		params.Add(prefix+"adjustOrderSaleMoney", strconv.FormatInt(p.AdjustOrderSaleMoney, 10))
	}
	if p.ActivateOrderNum > 0 {
		params.Add(prefix+"activateOrderNum", strconv.FormatInt(p.ActivateOrderNum, 10))
	}
	if p.ActivateOrderTicket > 0 {
		params.Add(prefix+"activateOrderTicket", strconv.FormatInt(p.ActivateOrderTicket, 10))
	}
	if p.ActivateOrderCostMoney > 0 {
		params.Add(prefix+"activateOrderCostMoney", strconv.FormatInt(p.ActivateOrderCostMoney, 10))
	}
	if p.ActivateOrderSaleMoney > 0 {
		params.Add(prefix+"activateOrderSaleMoney", strconv.FormatInt(p.ActivateOrderSaleMoney, 10))
	}
	return params
}


// AnnualCardSummaryList AnnualCardSummaryList
type AnnualCardSummaryList struct {
	TicketId int64 `json:"ticketId,omitempty"`
	TicketName string `json:"ticketName,omitempty"`
	Summary AnnualCardSummary `json:"summary,omitempty"`

}

// Params 将AnnualCardSummaryList转换为url.Values
func (p AnnualCardSummaryList) Params(prefix string) url.Values {
	params := url.Values{}
	if p.TicketId > 0 {
		params.Add(prefix+"ticketId", strconv.FormatInt(p.TicketId, 10))
	}
	if p.TicketName != "" {
		params.Add(prefix+"ticketName", p.TicketName)
	}
	for key, values := range p.Summary.Params(prefix+"summary.") {
		for _, value := range values {
			params.Add(key, value)
		}
	}
	return params
}


