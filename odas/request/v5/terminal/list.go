// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package terminal

import (
	"fmt"
	"net/url"
	"github.com/piaofutong/odas-sdk/odas/request/common"
	"strconv"
	"time"
)

// ListReq List请求
type ListReq struct {
	Sids []int64 `json:"sids,omitempty"`
	Page int64 `json:"page,omitempty"`
	PageSize int64 `json:"pageSize,omitempty"`
	DeviceType int64 `json:"deviceType,omitempty"`

}

// Api 返回API路径
func (r *ListReq) Api() string {
	params := url.Values{}
	if len(r.Sids) > 0 {
		for _, id := range r.Sids {
			params.Add("sids", strconv.FormatInt(id, 10))
		}
	}
	if r.Page > 0 {
		params.Add("page", strconv.FormatInt(r.Page, 10))
	}
	if r.PageSize > 0 {
		params.Add("pageSize", strconv.FormatInt(r.PageSize, 10))
	}
	if r.DeviceType > 0 {
		params.Add("deviceType", strconv.FormatInt(r.DeviceType, 10))
	}
	return fmt.Sprintf("/v5/terminal/devices?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *ListReq) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *ListReq) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *ListReq) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *ListReq) AuthRequired() bool {
	return true
}


// ListResp List响应
type ListResp struct {
	List []*StatListData `json:"list,omitempty"`
	Pagination *common.Pagination `json:"pagination"`

}



// StatListData StatListData
type StatListData struct {
	Sid int64 `json:"sid,omitempty"`
	DeviceName string `json:"deviceName,omitempty"`
	DeviceKey string `json:"deviceKey,omitempty"`
	SiteId int64 `json:"siteId,omitempty"`
	Location string `json:"location,omitempty"`
	Status int64 `json:"status,omitempty"`
	StatusText string `json:"statusText,omitempty"`
	ActiveTime *time.Time `json:"activeTime,omitempty"`
	ActiveTimeText string `json:"activeTimeText,omitempty"`
	TodayIn *int64 `json:"todayIn,omitempty"`
	TodayOut *int64 `json:"todayOut,omitempty"`

}

// Params 将StatListData转换为url.Values
func (p StatListData) Params(prefix string) url.Values {
	params := url.Values{}
	if p.Sid > 0 {
		params.Add(prefix+"sid", strconv.FormatInt(p.Sid, 10))
	}
	if p.DeviceName != "" {
		params.Add(prefix+"deviceName", p.DeviceName)
	}
	if p.DeviceKey != "" {
		params.Add(prefix+"deviceKey", p.DeviceKey)
	}
	if p.SiteId > 0 {
		params.Add(prefix+"siteId", strconv.FormatInt(p.SiteId, 10))
	}
	if p.Location != "" {
		params.Add(prefix+"location", p.Location)
	}
	if p.Status > 0 {
		params.Add(prefix+"status", strconv.FormatInt(p.Status, 10))
	}
	if p.StatusText != "" {
		params.Add(prefix+"statusText", p.StatusText)
	}
	if p.ActiveTime != nil {
		params.Add(prefix+"activeTime", p.ActiveTime.Format("2006-01-02 15:04:05"))
	}
	if p.ActiveTimeText != "" {
		params.Add(prefix+"activeTimeText", p.ActiveTimeText)
	}
	if p.TodayIn != nil {
		params.Add(prefix+"todayIn", strconv.FormatInt(*p.TodayIn, 10))
	}
	if p.TodayOut != nil {
		params.Add(prefix+"todayOut", strconv.FormatInt(*p.TodayOut, 10))
	}
	return params
}


// Pagination Pagination
type Pagination struct {
	Page int64 `json:"page,omitempty"`
	PageSize int64 `json:"pageSize,omitempty"`
	Total int64 `json:"total,omitempty"`
	Pages int64 `json:"pages,omitempty"`

}

// Params 将Pagination转换为url.Values
func (p Pagination) Params(prefix string) url.Values {
	params := url.Values{}
	if p.Page > 0 {
		params.Add(prefix+"page", strconv.FormatInt(p.Page, 10))
	}
	if p.PageSize > 0 {
		params.Add(prefix+"pageSize", strconv.FormatInt(p.PageSize, 10))
	}
	if p.Total > 0 {
		params.Add(prefix+"total", strconv.FormatInt(p.Total, 10))
	}
	if p.Pages > 0 {
		params.Add(prefix+"pages", strconv.FormatInt(p.Pages, 10))
	}
	return params
}


