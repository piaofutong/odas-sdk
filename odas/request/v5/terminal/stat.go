// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package terminal

import (
	"fmt"
	"net/url"
	"github.com/piaofutong/odas-sdk/odas/request/types"
	"strconv"
)

// DeviceJournalStatReq DeviceJournalStat请求
type DeviceJournalStatReq struct {
	Sid int64 `json:"sid,omitempty"`
	NodeId []int32 `json:"nodeId,omitempty"`
	Hour []int32 `json:"hour,omitempty"`
	BasedOnOrder types.BasedOnOrderEnum `json:"basedOnOrder,omitempty"`

}

// Api 返回API路径
func (r *DeviceJournalStatReq) Api() string {
	params := url.Values{}
	if r.Sid > 0 {
		params.Add("sid", strconv.FormatInt(r.Sid, 10))
	}
	if len(r.NodeId) > 0 {
		for _, id := range r.NodeId {
			params.Add("nodeId", strconv.FormatInt(int64(id), 10))
		}
	}
	if len(r.Hour) > 0 {
		for _, id := range r.Hour {
			params.Add("hour", strconv.FormatInt(int64(id), 10))
		}
	}
	if r.BasedOnOrder > 0 {
		params.Add("basedOnOrder", strconv.FormatInt(int64(r.BasedOnOrder), 10))
	}
	return fmt.Sprintf("/v5/terminal/device-journal/stat?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *DeviceJournalStatReq) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *DeviceJournalStatReq) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *DeviceJournalStatReq) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *DeviceJournalStatReq) AuthRequired() bool {
	return true
}


// DeviceJournalStatResp DeviceJournalStat响应
type DeviceJournalStatResp struct {
	Total DeviceJournalNodeStatDO `json:"total,omitempty"`
	List []*DeviceJournalNodeItemDO `json:"list,omitempty"`

}



// DeviceJournalNodeStatDO DeviceJournalNodeStatDO
type DeviceJournalNodeStatDO struct {
	In int32 `json:"in,omitempty"`
	Out int32 `json:"out,omitempty"`

}

// Params 将DeviceJournalNodeStatDO转换为url.Values
func (p DeviceJournalNodeStatDO) Params(prefix string) url.Values {
	params := url.Values{}
	if p.In > 0 {
		params.Add(prefix+"in", strconv.FormatInt(int64(p.In), 10))
	}
	if p.Out > 0 {
		params.Add(prefix+"out", strconv.FormatInt(int64(p.Out), 10))
	}
	return params
}


// DeviceJournalNodeItemDO DeviceJournalNodeItemDO
type DeviceJournalNodeItemDO struct {
	NodeId int32 `json:"nodeId,omitempty"`
	In int32 `json:"in,omitempty"`
	Out int32 `json:"out,omitempty"`

}

// Params 将DeviceJournalNodeItemDO转换为url.Values
func (p DeviceJournalNodeItemDO) Params(prefix string) url.Values {
	params := url.Values{}
	if p.NodeId > 0 {
		params.Add(prefix+"nodeId", strconv.FormatInt(int64(p.NodeId), 10))
	}
	if p.In > 0 {
		params.Add(prefix+"in", strconv.FormatInt(int64(p.In), 10))
	}
	if p.Out > 0 {
		params.Add(prefix+"out", strconv.FormatInt(int64(p.Out), 10))
	}
	return params
}


