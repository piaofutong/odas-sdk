// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package terminal

import (
	"fmt"
	"net/url"
	"strconv"
)

// DeviceSummaryByNetStatusReq DeviceSummaryByNetStatus请求
type DeviceSummaryByNetStatusReq struct {
	Sids []int64 `json:"sids,omitempty"`

}

// Api 返回API路径
func (r *DeviceSummaryByNetStatusReq) Api() string {
	params := url.Values{}
	if len(r.Sids) > 0 {
		for _, id := range r.Sids {
			params.Add("sids", strconv.FormatInt(id, 10))
		}
	}
	return fmt.Sprintf("/v5/terminal/devices/g-net-status/summary?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *DeviceSummaryByNetStatusReq) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *DeviceSummaryByNetStatusReq) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *DeviceSummaryByNetStatusReq) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *DeviceSummaryByNetStatusReq) AuthRequired() bool {
	return true
}


// DeviceSummaryByNetStatusResp DeviceSummaryByNetStatus响应
type DeviceSummaryByNetStatusResp struct {
	Total DeviceSummary `json:"total,omitempty"`
	List []*DeviceSummaryByNetStatusList `json:"list,omitempty"`

}



// DeviceSummaryByNetStatusList DeviceSummaryByNetStatusList
type DeviceSummaryByNetStatusList struct {
	Status int64 `json:"status,omitempty"`
	StatusName string `json:"statusName,omitempty"`
	Summary DeviceSummary `json:"summary,omitempty"`
	Rate float64 `json:"rate,omitempty"`

}

// Params 将DeviceSummaryByNetStatusList转换为url.Values
func (p DeviceSummaryByNetStatusList) Params(prefix string) url.Values {
	params := url.Values{}
	if p.Status > 0 {
		params.Add(prefix+"status", strconv.FormatInt(p.Status, 10))
	}
	if p.StatusName != "" {
		params.Add(prefix+"statusName", p.StatusName)
	}
	for key, values := range p.Summary.Params(prefix+"summary.") {
		for _, value := range values {
			params.Add(key, value)
		}
	}
	if p.Rate > 0 {
		params.Add(prefix+"rate", fmt.Sprintf("%v", p.Rate))
	}
	return params
}


