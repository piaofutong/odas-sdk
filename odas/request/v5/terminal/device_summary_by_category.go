// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package terminal

import (
	"fmt"
	"net/url"
	"strconv"
)

// DeviceSummaryByCategoryReq DeviceSummaryByCategory请求
type DeviceSummaryByCategoryReq struct {
	Sids []int64 `json:"sids,omitempty"`

}

// Api 返回API路径
func (r *DeviceSummaryByCategoryReq) Api() string {
	params := url.Values{}
	if len(r.Sids) > 0 {
		for _, id := range r.Sids {
			params.Add("sids", strconv.FormatInt(id, 10))
		}
	}
	return fmt.Sprintf("/v5/terminal/devices/g-category/summary?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *DeviceSummaryByCategoryReq) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *DeviceSummaryByCategoryReq) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *DeviceSummaryByCategoryReq) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *DeviceSummaryByCategoryReq) AuthRequired() bool {
	return true
}


// DeviceSummaryByCategoryResp DeviceSummaryByCategory响应
type DeviceSummaryByCategoryResp struct {
	Total DeviceSummary `json:"total,omitempty"`
	List []*DeviceSummaryByCategoryList `json:"list,omitempty"`

}



// DeviceSummary DeviceSummary
type DeviceSummary struct {
	Count int64 `json:"count,omitempty"`

}

// Params 将DeviceSummary转换为url.Values
func (p DeviceSummary) Params(prefix string) url.Values {
	params := url.Values{}
	if p.Count > 0 {
		params.Add(prefix+"count", strconv.FormatInt(p.Count, 10))
	}
	return params
}


// DeviceSummaryByCategoryList DeviceSummaryByCategoryList
type DeviceSummaryByCategoryList struct {
	Category int64 `json:"category,omitempty"`
	CategoryName string `json:"categoryName,omitempty"`
	Summary DeviceSummary `json:"summary,omitempty"`
	Rate float64 `json:"rate,omitempty"`

}

// Params 将DeviceSummaryByCategoryList转换为url.Values
func (p DeviceSummaryByCategoryList) Params(prefix string) url.Values {
	params := url.Values{}
	if p.Category > 0 {
		params.Add(prefix+"category", strconv.FormatInt(p.Category, 10))
	}
	if p.CategoryName != "" {
		params.Add(prefix+"categoryName", p.CategoryName)
	}
	for key, values := range p.Summary.Params(prefix+"summary.") {
		for _, value := range values {
			params.Add(key, value)
		}
	}
	if p.Rate > 0 {
		params.Add(prefix+"rate", fmt.Sprintf("%v", p.Rate))
	}
	return params
}


