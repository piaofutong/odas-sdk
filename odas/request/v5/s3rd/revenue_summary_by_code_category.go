// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package s3rd

import (
	"fmt"
	"net/url"
	"strconv"
	"time"
)

// RevenueSummaryByCodeCategoryReq RevenueSummaryByCodeCategory请求
type RevenueSummaryByCodeCategoryReq struct {
	Sid []int64 `json:"sid,omitempty"`
	Start *time.Time `json:"start,omitempty"`
	End *time.Time `json:"end,omitempty"`
	CodeCategory []string `json:"codeCategory,omitempty"`

}

// Api 返回API路径
func (r *RevenueSummaryByCodeCategoryReq) Api() string {
	params := url.Values{}
	if len(r.Sid) > 0 {
		for _, id := range r.Sid {
			params.Add("sid", strconv.FormatInt(id, 10))
		}
	}
	if r.Start != nil {
		params.Add("start", r.Start.Format("2006-01-02 15:04:05"))
	}
	if r.End != nil {
		params.Add("end", r.End.Format("2006-01-02 15:04:05"))
	}
	if len(r.CodeCategory) > 0 {
		for _, id := range r.CodeCategory {
			params.Add("codeCategory", id)
		}
	}
	return fmt.Sprintf("/v5/s3rd/lvyun-hotel/g-code-category/revenue-summary?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *RevenueSummaryByCodeCategoryReq) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *RevenueSummaryByCodeCategoryReq) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *RevenueSummaryByCodeCategoryReq) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *RevenueSummaryByCodeCategoryReq) AuthRequired() bool {
	return true
}


// RevenueSummaryByCodeCategoryResp RevenueSummaryByCodeCategory响应
type RevenueSummaryByCodeCategoryResp struct {
	Total RevenueSummary `json:"total,omitempty"`
	List []*RevenueSummaryByCodeCategoryList `json:"list,omitempty"`

}



// RevenueSummary RevenueSummary
type RevenueSummary struct {
	RevTotal float64 `json:"revTotal,omitempty"`
	RevRm float64 `json:"revRm,omitempty"`
	RevFb float64 `json:"revFb,omitempty"`
	RevMt float64 `json:"revMt,omitempty"`
	RevEn float64 `json:"revEn,omitempty"`
	RevSp float64 `json:"revSp,omitempty"`
	RevOt float64 `json:"revOt,omitempty"`
	RoomsTotal float64 `json:"roomsTotal,omitempty"`
	RoomsArr float64 `json:"roomsArr,omitempty"`
	RoomsDep float64 `json:"roomsDep,omitempty"`
	RoomsNoShow int64 `json:"roomsNoShow,omitempty"`
	RoomsCxl int64 `json:"roomsCxl,omitempty"`
	People int64 `json:"people,omitempty"`
	PeopleArr int64 `json:"peopleArr,omitempty"`
	PeopleDep int64 `json:"peopleDep,omitempty"`

}

// Params 将RevenueSummary转换为url.Values
func (p RevenueSummary) Params(prefix string) url.Values {
	params := url.Values{}
	if p.RevTotal > 0 {
		params.Add(prefix+"revTotal", fmt.Sprintf("%v", p.RevTotal))
	}
	if p.RevRm > 0 {
		params.Add(prefix+"revRm", fmt.Sprintf("%v", p.RevRm))
	}
	if p.RevFb > 0 {
		params.Add(prefix+"revFb", fmt.Sprintf("%v", p.RevFb))
	}
	if p.RevMt > 0 {
		params.Add(prefix+"revMt", fmt.Sprintf("%v", p.RevMt))
	}
	if p.RevEn > 0 {
		params.Add(prefix+"revEn", fmt.Sprintf("%v", p.RevEn))
	}
	if p.RevSp > 0 {
		params.Add(prefix+"revSp", fmt.Sprintf("%v", p.RevSp))
	}
	if p.RevOt > 0 {
		params.Add(prefix+"revOt", fmt.Sprintf("%v", p.RevOt))
	}
	if p.RoomsTotal > 0 {
		params.Add(prefix+"roomsTotal", fmt.Sprintf("%v", p.RoomsTotal))
	}
	if p.RoomsArr > 0 {
		params.Add(prefix+"roomsArr", fmt.Sprintf("%v", p.RoomsArr))
	}
	if p.RoomsDep > 0 {
		params.Add(prefix+"roomsDep", fmt.Sprintf("%v", p.RoomsDep))
	}
	if p.RoomsNoShow > 0 {
		params.Add(prefix+"roomsNoShow", strconv.FormatInt(p.RoomsNoShow, 10))
	}
	if p.RoomsCxl > 0 {
		params.Add(prefix+"roomsCxl", strconv.FormatInt(p.RoomsCxl, 10))
	}
	if p.People > 0 {
		params.Add(prefix+"people", strconv.FormatInt(p.People, 10))
	}
	if p.PeopleArr > 0 {
		params.Add(prefix+"peopleArr", strconv.FormatInt(p.PeopleArr, 10))
	}
	if p.PeopleDep > 0 {
		params.Add(prefix+"peopleDep", strconv.FormatInt(p.PeopleDep, 10))
	}
	return params
}


// RevenueSummaryByCodeCategoryList RevenueSummaryByCodeCategoryList
type RevenueSummaryByCodeCategoryList struct {
	CodeCategory string `json:"codeCategory,omitempty"`
	CodeCategoryDes string `json:"codeCategoryDes,omitempty"`
	Summary RevenueSummary `json:"summary,omitempty"`

}

// Params 将RevenueSummaryByCodeCategoryList转换为url.Values
func (p RevenueSummaryByCodeCategoryList) Params(prefix string) url.Values {
	params := url.Values{}
	if p.CodeCategory != "" {
		params.Add(prefix+"codeCategory", p.CodeCategory)
	}
	if p.CodeCategoryDes != "" {
		params.Add(prefix+"codeCategoryDes", p.CodeCategoryDes)
	}
	for key, values := range p.Summary.Params(prefix+"summary.") {
		for _, value := range values {
			params.Add(key, value)
		}
	}
	return params
}


