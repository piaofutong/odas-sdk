// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package s3rd

import (
	"fmt"
	"net/url"
	"strconv"
	"time"
)

// RmSaleSummaryByBindReq RmSaleSummaryByBind请求
type RmSaleSummaryByBindReq struct {
	Sid []int64 `json:"sid,omitempty"`
	Start time.Time `json:"start,omitempty"`
	End time.Time `json:"end,omitempty"`

}

// Api 返回API路径
func (r *RmSaleSummaryByBindReq) Api() string {
	params := url.Values{}
	if len(r.Sid) > 0 {
		for _, id := range r.Sid {
			params.Add("sid", strconv.FormatInt(id, 10))
		}
	}
	if !r.Start.IsZero() {
		params.Add("start", r.Start.Format("2006-01-02 15:04:05"))
	}
	if !r.End.IsZero() {
		params.Add("end", r.End.Format("2006-01-02 15:04:05"))
	}
	return fmt.Sprintf("/v5/s3rd/lvyun-hotel/g-bind/rm-sale-summary?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *RmSaleSummaryByBindReq) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *RmSaleSummaryByBindReq) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *RmSaleSummaryByBindReq) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *RmSaleSummaryByBindReq) AuthRequired() bool {
	return true
}


// RmSaleSummaryByBindResp RmSaleSummaryByBind响应
type RmSaleSummaryByBindResp struct {
	Total RmSaleSummary `json:"total,omitempty"`
	List []*RmSaleSummaryByBindList `json:"list,omitempty"`

}



// RmSaleSummaryByBindList RmSaleSummaryByBindList
type RmSaleSummaryByBindList struct {
	BindId int64 `json:"bindId,omitempty"`
	Name string `json:"name,omitempty"`
	Summary RmSaleSummary `json:"summary,omitempty"`

}

// Params 将RmSaleSummaryByBindList转换为url.Values
func (p RmSaleSummaryByBindList) Params(prefix string) url.Values {
	params := url.Values{}
	if p.BindId > 0 {
		params.Add(prefix+"bindId", strconv.FormatInt(p.BindId, 10))
	}
	if p.Name != "" {
		params.Add(prefix+"name", p.Name)
	}
	for key, values := range p.Summary.Params(prefix+"summary.") {
		for _, value := range values {
			params.Add(key, value)
		}
	}
	return params
}


