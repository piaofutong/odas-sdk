// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package s3rd

import (
	"fmt"
	"net/url"
	"strconv"
)

// SpaceReq Space请求
type SpaceReq struct {
	Sid []int64 `json:"sid,omitempty"`

}

// Api 返回API路径
func (r *SpaceReq) Api() string {
	params := url.Values{}
	if len(r.Sid) > 0 {
		for _, id := range r.Sid {
			params.Add("sid", strconv.FormatInt(id, 10))
		}
	}
	return fmt.Sprintf("/v5/s3rd/parking/space?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *SpaceReq) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *SpaceReq) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *SpaceReq) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *SpaceReq) AuthRequired() bool {
	return true
}


// SpaceResp Space响应
type SpaceResp struct {
	Summary SpaceTotal `json:"summary,omitempty"`
	List []*SpaceList `json:"list,omitempty"`

}



// SpaceTotal SpaceTotal
type SpaceTotal struct {
	Total int64 `json:"total,omitempty"`
	Remain int64 `json:"remain,omitempty"`
	Used int64 `json:"used,omitempty"`

}

// Params 将SpaceTotal转换为url.Values
func (p SpaceTotal) Params(prefix string) url.Values {
	params := url.Values{}
	if p.Total > 0 {
		params.Add(prefix+"total", strconv.FormatInt(p.Total, 10))
	}
	if p.Remain > 0 {
		params.Add(prefix+"remain", strconv.FormatInt(p.Remain, 10))
	}
	if p.Used > 0 {
		params.Add(prefix+"used", strconv.FormatInt(p.Used, 10))
	}
	return params
}


// SpaceList SpaceList
type SpaceList struct {
	BindId int64 `json:"bindId,omitempty"`
	Name string `json:"name,omitempty"`
	Total int64 `json:"total,omitempty"`
	Remain int64 `json:"remain,omitempty"`
	Used int64 `json:"used,omitempty"`

}

// Params 将SpaceList转换为url.Values
func (p SpaceList) Params(prefix string) url.Values {
	params := url.Values{}
	if p.BindId > 0 {
		params.Add(prefix+"bindId", strconv.FormatInt(p.BindId, 10))
	}
	if p.Name != "" {
		params.Add(prefix+"name", p.Name)
	}
	if p.Total > 0 {
		params.Add(prefix+"total", strconv.FormatInt(p.Total, 10))
	}
	if p.Remain > 0 {
		params.Add(prefix+"remain", strconv.FormatInt(p.Remain, 10))
	}
	if p.Used > 0 {
		params.Add(prefix+"used", strconv.FormatInt(p.Used, 10))
	}
	return params
}


