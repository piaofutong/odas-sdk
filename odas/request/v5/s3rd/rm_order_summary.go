// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package s3rd

import (
	"fmt"
	"net/url"
	"strconv"
	"time"
)

// RmOrderSummaryReq RmOrderSummary请求
type RmOrderSummaryReq struct {
	Sid []int64 `json:"sid,omitempty"`
	Start time.Time `json:"start,omitempty"`
	End time.Time `json:"end,omitempty"`

}

// Api 返回API路径
func (r *RmOrderSummaryReq) Api() string {
	params := url.Values{}
	if len(r.Sid) > 0 {
		for _, id := range r.Sid {
			params.Add("sid", strconv.FormatInt(id, 10))
		}
	}
	if !r.Start.IsZero() {
		params.Add("start", r.Start.Format("2006-01-02 15:04:05"))
	}
	if !r.End.IsZero() {
		params.Add("end", r.End.Format("2006-01-02 15:04:05"))
	}
	return fmt.Sprintf("/v5/s3rd/lvyun-hotel/rm-order-summary?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *RmOrderSummaryReq) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *RmOrderSummaryReq) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *RmOrderSummaryReq) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *RmOrderSummaryReq) AuthRequired() bool {
	return true
}


// RmOrderSummaryResp RmOrderSummary响应
type RmOrderSummaryResp struct {
	Total RmOrderSummary `json:"total,omitempty"`
	List []*RmOrderReportList `json:"list,omitempty"`

}



// RmOrderSummary RmOrderSummary
type RmOrderSummary struct {
	BookingCount int64 `json:"bookingCount,omitempty"`
	BookingRoomNum int64 `json:"bookingRoomNum,omitempty"`
	BookingAdult int64 `json:"bookingAdult,omitempty"`
	BookingChildren int64 `json:"bookingChildren,omitempty"`
	BookingPeople int64 `json:"bookingPeople,omitempty"`
	BookingCharge int64 `json:"bookingCharge,omitempty"`
	BookingPay int64 `json:"bookingPay,omitempty"`
	CheckInCount int64 `json:"checkInCount,omitempty"`
	CheckInRoomNum int64 `json:"checkInRoomNum,omitempty"`
	CheckInAdult int64 `json:"checkInAdult,omitempty"`
	CheckInChildren int64 `json:"checkInChildren,omitempty"`
	CheckInPeople int64 `json:"checkInPeople,omitempty"`
	CheckInCharge int64 `json:"checkInCharge,omitempty"`
	CheckInPay int64 `json:"checkInPay,omitempty"`

}

// Params 将RmOrderSummary转换为url.Values
func (p RmOrderSummary) Params(prefix string) url.Values {
	params := url.Values{}
	if p.BookingCount > 0 {
		params.Add(prefix+"bookingCount", strconv.FormatInt(p.BookingCount, 10))
	}
	if p.BookingRoomNum > 0 {
		params.Add(prefix+"bookingRoomNum", strconv.FormatInt(p.BookingRoomNum, 10))
	}
	if p.BookingAdult > 0 {
		params.Add(prefix+"bookingAdult", strconv.FormatInt(p.BookingAdult, 10))
	}
	if p.BookingChildren > 0 {
		params.Add(prefix+"bookingChildren", strconv.FormatInt(p.BookingChildren, 10))
	}
	if p.BookingPeople > 0 {
		params.Add(prefix+"bookingPeople", strconv.FormatInt(p.BookingPeople, 10))
	}
	if p.BookingCharge > 0 {
		params.Add(prefix+"bookingCharge", strconv.FormatInt(p.BookingCharge, 10))
	}
	if p.BookingPay > 0 {
		params.Add(prefix+"bookingPay", strconv.FormatInt(p.BookingPay, 10))
	}
	if p.CheckInCount > 0 {
		params.Add(prefix+"checkInCount", strconv.FormatInt(p.CheckInCount, 10))
	}
	if p.CheckInRoomNum > 0 {
		params.Add(prefix+"checkInRoomNum", strconv.FormatInt(p.CheckInRoomNum, 10))
	}
	if p.CheckInAdult > 0 {
		params.Add(prefix+"checkInAdult", strconv.FormatInt(p.CheckInAdult, 10))
	}
	if p.CheckInChildren > 0 {
		params.Add(prefix+"checkInChildren", strconv.FormatInt(p.CheckInChildren, 10))
	}
	if p.CheckInPeople > 0 {
		params.Add(prefix+"checkInPeople", strconv.FormatInt(p.CheckInPeople, 10))
	}
	if p.CheckInCharge > 0 {
		params.Add(prefix+"checkInCharge", strconv.FormatInt(p.CheckInCharge, 10))
	}
	if p.CheckInPay > 0 {
		params.Add(prefix+"checkInPay", strconv.FormatInt(p.CheckInPay, 10))
	}
	return params
}


// RmOrderReportList RmOrderReportList
type RmOrderReportList struct {
	Date string `json:"date,omitempty"`
	Summary RmOrderSummary `json:"summary,omitempty"`

}

// Params 将RmOrderReportList转换为url.Values
func (p RmOrderReportList) Params(prefix string) url.Values {
	params := url.Values{}
	if p.Date != "" {
		params.Add(prefix+"date", p.Date)
	}
	for key, values := range p.Summary.Params(prefix+"summary.") {
		for _, value := range values {
			params.Add(key, value)
		}
	}
	return params
}


