// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package tourist

import (
	"fmt"
	"net/url"
	"github.com/piaofutong/odas-sdk/odas/request/common"
	"github.com/piaofutong/odas-sdk/odas/request/types"
	"strconv"
	"time"
)

// PreBookingServiceSummaryReq PreBookingServiceSummary请求
type PreBookingServiceSummaryReq struct {
	Request *common.PassedTimeSpanByOrderTypeV4Request `json:"request,omitempty"`

}

// Api 返回API路径
func (r *PreBookingServiceSummaryReq) Api() string {
	params := url.Values{}
	if r.Request != nil {
		requestParams := r.Request.Params("")
		for key, values := range requestParams {
			for _, value := range values {
				params.Add(key, value)
			}
		}
	}

	return fmt.Sprintf("/v5/tourist/pre-booking/summary?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *PreBookingServiceSummaryReq) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *PreBookingServiceSummaryReq) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *PreBookingServiceSummaryReq) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *PreBookingServiceSummaryReq) AuthRequired() bool {
	return true
}


// PreBookingServiceSummaryResp PreBookingServiceSummary响应
type PreBookingServiceSummaryResp struct {
	Total PreBookingSummary `json:"total,omitempty"`
	List []*PreBookingServiceSummaryList `json:"list,omitempty"`

}



// PassedTimeSpanByOrderTypeV4Request PassedTimeSpanByOrderTypeV4请求
type PassedTimeSpanByOrderTypeV4Request struct {
	OrderType types.OrderType `json:"orderType,omitempty"`

}

// Params 将PassedTimeSpanByOrderTypeV4Request转换为url.Values
func (p PassedTimeSpanByOrderTypeV4Request) Params(prefix string) url.Values {
	params := url.Values{}
	if p.OrderType > 0 {
		params.Add(prefix+"orderType", strconv.FormatInt(int64(p.OrderType), 10))
	}
	return params
}


// PassedTimeSpanV4Request PassedTimeSpanV4请求
type PassedTimeSpanV4Request struct {
	Lid []int `json:"lid,omitempty"`
	ExcludeLid []int `json:"excludeLid,omitempty"`

}

// Params 将PassedTimeSpanV4Request转换为url.Values
func (p PassedTimeSpanV4Request) Params(prefix string) url.Values {
	params := url.Values{}
	if len(p.Lid) > 0 {
		for _, item := range p.Lid {
		params.Add(prefix+"lid", strconv.Itoa(item))
	}
	}
	if len(p.ExcludeLid) > 0 {
		for _, item := range p.ExcludeLid {
		params.Add(prefix+"excludeLid", strconv.Itoa(item))
	}
	}
	return params
}


// PassedTimeSpanRequest PassedTimeSpan请求
type PassedTimeSpanRequest struct {
	Sid []int `json:"sid,omitempty"`

}

// Params 将PassedTimeSpanRequest转换为url.Values
func (p PassedTimeSpanRequest) Params(prefix string) url.Values {
	params := url.Values{}
	if len(p.Sid) > 0 {
		for _, item := range p.Sid {
		params.Add(prefix+"sid", strconv.Itoa(item))
	}
	}
	return params
}


// TimeSpan TimeSpan
type TimeSpan struct {
	Start time.Time `json:"start,omitempty"`
	End time.Time `json:"end,omitempty"`
	Type types.TimeFilterType `json:"type,omitempty"`
	IntervalDays int `json:"intervalDays,omitempty"`

}

// Params 将TimeSpan转换为url.Values
func (p TimeSpan) Params(prefix string) url.Values {
	params := url.Values{}
	if !p.Start.IsZero() {
		params.Add(prefix+"start", p.Start.Format("2006-01-02 15:04:05"))
	}
	if !p.End.IsZero() {
		params.Add(prefix+"end", p.End.Format("2006-01-02 15:04:05"))
	}
	if p.Type > 0 {
		params.Add(prefix+"type", strconv.FormatInt(int64(p.Type), 10))
	}
	if p.IntervalDays > 0 {
		params.Add(prefix+"intervalDays", strconv.Itoa(p.IntervalDays))
	}
	return params
}


// PreBookingSummary PreBookingSummary
type PreBookingSummary struct {
	OrderNum int64 `json:"orderNum,omitempty"`
	OrderTicket int64 `json:"orderTicket,omitempty"`
	OrderAmount int64 `json:"orderAmount,omitempty"`

}

// Params 将PreBookingSummary转换为url.Values
func (p PreBookingSummary) Params(prefix string) url.Values {
	params := url.Values{}
	if p.OrderNum > 0 {
		params.Add(prefix+"orderNum", strconv.FormatInt(p.OrderNum, 10))
	}
	if p.OrderTicket > 0 {
		params.Add(prefix+"orderTicket", strconv.FormatInt(p.OrderTicket, 10))
	}
	if p.OrderAmount > 0 {
		params.Add(prefix+"orderAmount", strconv.FormatInt(p.OrderAmount, 10))
	}
	return params
}


// PreBookingServiceSummaryList PreBookingServiceSummaryList
type PreBookingServiceSummaryList struct {
	Time string `json:"time,omitempty"`
	Summary PreBookingSummary `json:"summary,omitempty"`

}

// Params 将PreBookingServiceSummaryList转换为url.Values
func (p PreBookingServiceSummaryList) Params(prefix string) url.Values {
	params := url.Values{}
	if p.Time != "" {
		params.Add(prefix+"time", p.Time)
	}
	for key, values := range p.Summary.Params(prefix+"summary.") {
		for _, value := range values {
			params.Add(key, value)
		}
	}
	return params
}


