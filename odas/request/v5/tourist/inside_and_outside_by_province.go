// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package tourist

import (
	"fmt"
	"net/url"
	"github.com/piaofutong/odas-sdk/odas/request/common"
	"strconv"
)

// InsideAndOutsideByProvinceReq InsideAndOutsideByProvince请求
type InsideAndOutsideByProvinceReq struct {
	Request common.PassedTimeSpanByOrderTypeV4Request `json:"request,omitempty"`
	Province string `json:"province,omitempty"`
	DimensionType int64 `json:"dimensionType,omitempty"`
	Limit int64 `json:"limit,omitempty"`
	Unknown bool `json:"unknown,omitempty"`

}

// Api 返回API路径
func (r *InsideAndOutsideByProvinceReq) Api() string {
	params := url.Values{}

	requestParams := r.Request.Params("")
	for key, values := range requestParams {
		for _, value := range values {
			params.Add(key, value)
		}
	}

	if r.Province != "" {
		params.Add("province", r.Province)
	}
	if r.DimensionType > 0 {
		params.Add("dimensionType", strconv.FormatInt(r.DimensionType, 10))
	}
	if r.Limit > 0 {
		params.Add("limit", strconv.FormatInt(r.Limit, 10))
	}
	if r.Unknown {
		params.Add("unknown", "true")
	}
	return fmt.Sprintf("/v5/tourist/portrait/g-province/inside-and-outside?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *InsideAndOutsideByProvinceReq) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *InsideAndOutsideByProvinceReq) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *InsideAndOutsideByProvinceReq) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *InsideAndOutsideByProvinceReq) AuthRequired() bool {
	return true
}


// InsideAndOutsideByProvinceResp InsideAndOutsideByProvince响应
type InsideAndOutsideByProvinceResp struct {
	Total InsideAndOutsideStatTotal `json:"total,omitempty"`
	Inside []*InsideList `json:"inside,omitempty"`
	Outside []*OutsideList `json:"outside,omitempty"`

}



// InsideAndOutsideStatTotal InsideAndOutsideStatTotal
type InsideAndOutsideStatTotal struct {
	InsideProvince int64 `json:"insideProvince,omitempty"`
	InsideRate float64 `json:"insideRate,omitempty"`
	OutsideProvince int64 `json:"outsideProvince,omitempty"`
	OutsideRate float64 `json:"outsideRate,omitempty"`

}

// Params 将InsideAndOutsideStatTotal转换为url.Values
func (p InsideAndOutsideStatTotal) Params(prefix string) url.Values {
	params := url.Values{}
	if p.InsideProvince > 0 {
		params.Add(prefix+"insideProvince", strconv.FormatInt(p.InsideProvince, 10))
	}
	if p.InsideRate > 0 {
		params.Add(prefix+"insideRate", fmt.Sprintf("%v", p.InsideRate))
	}
	if p.OutsideProvince > 0 {
		params.Add(prefix+"outsideProvince", strconv.FormatInt(p.OutsideProvince, 10))
	}
	if p.OutsideRate > 0 {
		params.Add(prefix+"outsideRate", fmt.Sprintf("%v", p.OutsideRate))
	}
	return params
}


// InsideList InsideList
type InsideList struct {
	City string `json:"city,omitempty"`
	Count int64 `json:"count,omitempty"`
	Rate float64 `json:"rate,omitempty"`

}

// Params 将InsideList转换为url.Values
func (p InsideList) Params(prefix string) url.Values {
	params := url.Values{}
	if p.City != "" {
		params.Add(prefix+"city", p.City)
	}
	if p.Count > 0 {
		params.Add(prefix+"count", strconv.FormatInt(p.Count, 10))
	}
	if p.Rate > 0 {
		params.Add(prefix+"rate", fmt.Sprintf("%v", p.Rate))
	}
	return params
}


// OutsideList OutsideList
type OutsideList struct {
	Province string `json:"province,omitempty"`
	Count int64 `json:"count,omitempty"`
	Rate float64 `json:"rate,omitempty"`

}

// Params 将OutsideList转换为url.Values
func (p OutsideList) Params(prefix string) url.Values {
	params := url.Values{}
	if p.Province != "" {
		params.Add(prefix+"province", p.Province)
	}
	if p.Count > 0 {
		params.Add(prefix+"count", strconv.FormatInt(p.Count, 10))
	}
	if p.Rate > 0 {
		params.Add(prefix+"rate", fmt.Sprintf("%v", p.Rate))
	}
	return params
}


