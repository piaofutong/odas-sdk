// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package tourist

import (
	"fmt"
	"github.com/piaofutong/odas-sdk/odas/common"
	"github.com/piaofutong/odas-sdk/odas/types"
	"net/url"
	"strconv"
)

// TouristSummaryByDistrictReq  按区县游客汇总请求
type TouristSummaryByDistrictReq struct {
	Request       common.PassedTimeSpanV4Request `json:"request,omitempty"`
	Compare       *common.PassedTimeBetween      `json:"compare,omitempty"`
	OrderType     types.OrderType                `json:"orderType,omitempty"`
	DimensionType int64                          `json:"dimensionType,omitempty"`
	Province      string                         `json:"province,omitempty"`
	City          string                         `json:"city,omitempty"`
	Limit         int64                          `json:"limit,omitempty"`
}

// Api 返回API路径
func (r *TouristSummaryByDistrictReq) Api() string {
	params := url.Values{}

	requestParams := r.Request.Params("")
	for key, values := range requestParams {
		for _, value := range values {
			params.Add(key, value)
		}
	}

	if r.Compare != nil {
		for key, values := range r.Compare.Params("compare.") {
			for _, value := range values {
				params.Add(key, value)
			}
		}
	}
	if r.OrderType > 0 {
		params.Add("orderType", strconv.FormatInt(int64(r.OrderType), 10))
	}
	if r.DimensionType > 0 {
		params.Add("dimensionType", strconv.FormatInt(r.DimensionType, 10))
	}
	if r.Province != "" {
		params.Add("province", r.Province)
	}
	if r.City != "" {
		params.Add("city", r.City)
	}
	if r.Limit > 0 {
		params.Add("limit", strconv.FormatInt(r.Limit, 10))
	}
	return fmt.Sprintf("/v5/tourist/portrait/g-district/tourist-summary?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *TouristSummaryByDistrictReq) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *TouristSummaryByDistrictReq) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *TouristSummaryByDistrictReq) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *TouristSummaryByDistrictReq) AuthRequired() bool {
	return true
}

// TouristSummaryByDistrictResp  按区县游客汇总响应
type TouristSummaryByDistrictResp struct {
	Total TouristSummary                  `json:"total,omitempty"`
	List  []*TouristSummaryByDistrictList `json:"list,omitempty"`
}

// TouristSummaryByDistrictList  按区县游客汇总列表
type TouristSummaryByDistrictList struct {
	Province         string         `json:"province,omitempty"`
	City             string         `json:"city,omitempty"`
	District         string         `json:"district,omitempty"`
	Summary          TouristSummary `json:"summary,omitempty"`
	Rate             float64        `json:"rate,omitempty"`
	CompareTotalRate float64        `json:"compareTotalRate,omitempty"`
}

// Params 将TouristSummaryByDistrictList转换为url.Values
func (p TouristSummaryByDistrictList) Params(prefix string) url.Values {
	params := url.Values{}
	if p.Province != "" {
		params.Add(prefix+"province", p.Province)
	}
	if p.City != "" {
		params.Add(prefix+"city", p.City)
	}
	if p.District != "" {
		params.Add(prefix+"district", p.District)
	}
	for key, values := range p.Summary.Params(prefix + "summary.") {
		for _, value := range values {
			params.Add(key, value)
		}
	}
	if p.Rate > 0 {
		params.Add(prefix+"rate", fmt.Sprintf("%v", p.Rate))
	}
	if p.CompareTotalRate > 0 {
		params.Add(prefix+"compareTotalRate", fmt.Sprintf("%v", p.CompareTotalRate))
	}
	return params
}
