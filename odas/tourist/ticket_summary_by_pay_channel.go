// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package tourist

import (
	"fmt"
	"github.com/piaofutong/odas-sdk/odas/common"
	"net/url"
	"strconv"
)

// TicketSummaryByPayChannelReq  按支付渠道票务汇总请求
type TicketSummaryByPayChannelReq struct {
	Request common.PassedTimeSpanByOrderTypeV5Request `json:"request,omitempty"`
}

// Api 返回API路径
func (r *TicketSummaryByPayChannelReq) Api() string {
	params := url.Values{}

	requestParams := r.Request.Params("")
	for key, values := range requestParams {
		for _, value := range values {
			params.Add(key, value)
		}
	}

	return fmt.Sprintf("/v5/tourist/portrait/g-pay-channel/ticket-summary?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *TicketSummaryByPayChannelReq) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *TicketSummaryByPayChannelReq) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *TicketSummaryByPayChannelReq) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *TicketSummaryByPayChannelReq) AuthRequired() bool {
	return true
}

// TicketSummaryByPayChannelResp  按支付渠道票务汇总响应
type TicketSummaryByPayChannelResp struct {
	List []*TicketSummaryByPayChannelList `json:"list,omitempty"`
}

// TicketSummaryByPayChannelList  按支付渠道票务汇总列表
type TicketSummaryByPayChannelList struct {
	PayChannelId   string            `json:"payChannelId,omitempty"`
	PayChannelName string            `json:"payChannelName,omitempty"`
	Summary        TicketSummary     `json:"summary,omitempty"`
	Rate           TicketSummaryRate `json:"rate,omitempty"`
}

// Params 将TicketSummaryByPayChannelList转换为url.Values
func (p TicketSummaryByPayChannelList) Params(prefix string) url.Values {
	params := url.Values{}
	if p.PayChannelId != "" {
		params.Add(prefix+"payChannelId", p.PayChannelId)
	}
	if p.PayChannelName != "" {
		params.Add(prefix+"payChannelName", p.PayChannelName)
	}
	for key, values := range p.Summary.Params(prefix + "summary.") {
		for _, value := range values {
			params.Add(key, value)
		}
	}
	for key, values := range p.Rate.Params(prefix + "rate.") {
		for _, value := range values {
			params.Add(key, value)
		}
	}
	return params
}

// TicketSummary  票务汇总
type TicketSummary struct {
	Amount      int64 `json:"amount,omitempty"`
	TicketCount int64 `json:"ticketCount,omitempty"`
}

// Params 将TicketSummary转换为url.Values
func (p TicketSummary) Params(prefix string) url.Values {
	params := url.Values{}
	if p.Amount > 0 {
		params.Add(prefix+"amount", strconv.FormatInt(p.Amount, 10))
	}
	if p.TicketCount > 0 {
		params.Add(prefix+"ticketCount", strconv.FormatInt(p.TicketCount, 10))
	}
	return params
}

// TicketSummaryRate  票务汇总比率
type TicketSummaryRate struct {
	Amount      float64 `json:"amount,omitempty"`
	TicketCount float64 `json:"ticketCount,omitempty"`
}

// Params 将TicketSummaryRate转换为url.Values
func (p TicketSummaryRate) Params(prefix string) url.Values {
	params := url.Values{}
	if p.Amount > 0 {
		params.Add(prefix+"amount", fmt.Sprintf("%v", p.Amount))
	}
	if p.TicketCount > 0 {
		params.Add(prefix+"ticketCount", fmt.Sprintf("%v", p.TicketCount))
	}
	return params
}
