// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package tourist

import (
	"fmt"
	"github.com/piaofutong/odas-sdk/odas/common"
	"net/url"
	"strconv"
)

// SexSummaryByAgeReq  按年龄段性别分布请求
type SexSummaryByAgeReq struct {
	Request       common.PassedTimeSpanByOrderTypeV5Request `json:"request,omitempty"`
	DimensionType int64                                     `json:"dimensionType,omitempty"`
	Province      []string                                  `json:"province,omitempty"`
}

// Api 返回API路径
func (r *SexSummaryByAgeReq) Api() string {
	params := url.Values{}

	requestParams := r.Request.Params("")
	for key, values := range requestParams {
		for _, value := range values {
			params.Add(key, value)
		}
	}

	if r.DimensionType > 0 {
		params.Add("dimensionType", strconv.FormatInt(r.DimensionType, 10))
	}
	if len(r.Province) > 0 {
		for _, id := range r.Province {
			params.Add("province", id)
		}
	}
	return fmt.Sprintf("/v5/tourist/portrait/g-age/sex-summary?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *SexSummaryByAgeReq) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *SexSummaryByAgeReq) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *SexSummaryByAgeReq) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *SexSummaryByAgeReq) AuthRequired() bool {
	return true
}

// SexSummaryByAgeResp  按年龄段性别分布响应
type SexSummaryByAgeResp struct {
	Total SexSummaryByAgeTotal   `json:"total,omitempty"`
	List  []*SexSummaryByAgeList `json:"list,omitempty"`
}

// SexSummaryByAgeTotal  按年龄段性别分布总计
type SexSummaryByAgeTotal struct {
	Total   int64 `json:"total,omitempty"`
	Male    int64 `json:"male,omitempty"`
	Female  int64 `json:"female,omitempty"`
	Unknown int64 `json:"unknown,omitempty"`
}

// Params 将SexSummaryByAgeTotal转换为url.Values
func (p SexSummaryByAgeTotal) Params(prefix string) url.Values {
	params := url.Values{}
	if p.Total > 0 {
		params.Add(prefix+"total", strconv.FormatInt(p.Total, 10))
	}
	if p.Male > 0 {
		params.Add(prefix+"male", strconv.FormatInt(p.Male, 10))
	}
	if p.Female > 0 {
		params.Add(prefix+"female", strconv.FormatInt(p.Female, 10))
	}
	if p.Unknown > 0 {
		params.Add(prefix+"unknown", strconv.FormatInt(p.Unknown, 10))
	}
	return params
}

// SexSummaryByAgeList  按年龄段性别分布列表
type SexSummaryByAgeList struct {
	AgeGroup string     `json:"ageGroup,omitempty"`
	Summary  SexSummary `json:"summary,omitempty"`
}

// Params 将SexSummaryByAgeList转换为url.Values
func (p SexSummaryByAgeList) Params(prefix string) url.Values {
	params := url.Values{}
	if p.AgeGroup != "" {
		params.Add(prefix+"ageGroup", p.AgeGroup)
	}
	for key, values := range p.Summary.Params(prefix + "summary.") {
		for _, value := range values {
			params.Add(key, value)
		}
	}
	return params
}

// SexSummary  性别汇总
type SexSummary struct {
	Male   int64 `json:"male,omitempty"`
	Female int64 `json:"female,omitempty"`
}

// Params 将SexSummary转换为url.Values
func (p SexSummary) Params(prefix string) url.Values {
	params := url.Values{}
	if p.Male > 0 {
		params.Add(prefix+"male", strconv.FormatInt(p.Male, 10))
	}
	if p.Female > 0 {
		params.Add(prefix+"female", strconv.FormatInt(p.Female, 10))
	}
	return params
}
