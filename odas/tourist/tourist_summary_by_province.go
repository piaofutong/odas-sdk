// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package tourist

import (
	"fmt"
	"github.com/piaofutong/odas-sdk/odas/common"
	"net/url"
	"strconv"
	"time"
)

// TouristSummaryByProvinceReq  按省份游客汇总请求
type TouristSummaryByProvinceReq struct {
	Request       common.PassedTimeSpanByOrderTypeV4Request `json:"request,omitempty"`
	Compare       *common.PassedTimeBetween                 `json:"compare,omitempty"`
	DimensionType int64                                     `json:"dimensionType,omitempty"`
	Limit         int64                                     `json:"limit,omitempty"`
}

// Api 返回API路径
func (r *TouristSummaryByProvinceReq) Api() string {
	params := url.Values{}

	requestParams := r.Request.Params("")
	for key, values := range requestParams {
		for _, value := range values {
			params.Add(key, value)
		}
	}

	if r.Compare != nil {
		for key, values := range r.Compare.Params("compare.") {
			for _, value := range values {
				params.Add(key, value)
			}
		}
	}
	if r.DimensionType > 0 {
		params.Add("dimensionType", strconv.FormatInt(r.DimensionType, 10))
	}
	if r.Limit > 0 {
		params.Add("limit", strconv.FormatInt(r.Limit, 10))
	}
	return fmt.Sprintf("/v5/tourist/portrait/g-province/tourist-summary?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *TouristSummaryByProvinceReq) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *TouristSummaryByProvinceReq) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *TouristSummaryByProvinceReq) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *TouristSummaryByProvinceReq) AuthRequired() bool {
	return true
}

// TouristSummaryByProvinceResp  按省份游客汇总响应
type TouristSummaryByProvinceResp struct {
	Total TouristSummary                  `json:"total,omitempty"`
	List  []*TouristSummaryByProvinceList `json:"list,omitempty"`
}

// PassedTimeBetween  时间范围
type PassedTimeBetween struct {
	Start time.Time `json:"start,omitempty"`
	End   time.Time `json:"end,omitempty"`
}

// Params 将PassedTimeBetween转换为url.Values
func (p PassedTimeBetween) Params(prefix string) url.Values {
	params := url.Values{}
	if !p.Start.IsZero() {
		params.Add(prefix+"start", p.Start.Format("2006-01-02 15:04:05"))
	}
	if !p.End.IsZero() {
		params.Add(prefix+"end", p.End.Format("2006-01-02 15:04:05"))
	}
	return params
}

// TouristSummaryByProvinceList  按省份游客汇总列表
type TouristSummaryByProvinceList struct {
	Province         string         `json:"province,omitempty"`
	Summary          TouristSummary `json:"summary,omitempty"`
	Rate             float64        `json:"rate,omitempty"`
	CompareTotalRate float64        `json:"compareTotalRate,omitempty"`
}

// Params 将TouristSummaryByProvinceList转换为url.Values
func (p TouristSummaryByProvinceList) Params(prefix string) url.Values {
	params := url.Values{}
	if p.Province != "" {
		params.Add(prefix+"province", p.Province)
	}
	for key, values := range p.Summary.Params(prefix + "summary.") {
		for _, value := range values {
			params.Add(key, value)
		}
	}
	if p.Rate > 0 {
		params.Add(prefix+"rate", fmt.Sprintf("%v", p.Rate))
	}
	if p.CompareTotalRate > 0 {
		params.Add(prefix+"compareTotalRate", fmt.Sprintf("%v", p.CompareTotalRate))
	}
	return params
}
