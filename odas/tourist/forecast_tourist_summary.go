// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package tourist

import (
	"fmt"
	"github.com/piaofutong/odas-sdk/odas/common"
	"net/url"
	"strconv"
)

// ForecastTouristSummaryReq  客流预测请求
type ForecastTouristSummaryReq struct {
	Request common.PassedTimeSpanByOrderTypeV4Request `json:"request,omitempty"`
}

// Api 返回API路径
func (r *ForecastTouristSummaryReq) Api() string {
	params := url.Values{}

	requestParams := r.Request.Params("")
	for key, values := range requestParams {
		for _, value := range values {
			params.Add(key, value)
		}
	}

	return fmt.Sprintf("/v5/tourist/flow/forecast-tourist-summary?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *ForecastTouristSummaryReq) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *ForecastTouristSummaryReq) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *ForecastTouristSummaryReq) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *ForecastTouristSummaryReq) AuthRequired() bool {
	return true
}

// ForecastTouristSummaryResp  客流预测响应体
type ForecastTouristSummaryResp struct {
	Forecast *ForecastTouristCount         `json:"forecast,omitempty"`
	List     []*ForecastTouristSummaryList `json:"list,omitempty"`
}

// ForecastTouristCount  客流预测数量
type ForecastTouristCount struct {
	Today    int64 `json:"today,omitempty"`
	Tomorrow int64 `json:"tomorrow,omitempty"`
	ThirdDay int64 `json:"thirdDay,omitempty"`
}

// Params 将ForecastTouristCount转换为url.Values
func (p ForecastTouristCount) Params(prefix string) url.Values {
	params := url.Values{}
	if p.Today > 0 {
		params.Add(prefix+"today", strconv.FormatInt(p.Today, 10))
	}
	if p.Tomorrow > 0 {
		params.Add(prefix+"tomorrow", strconv.FormatInt(p.Tomorrow, 10))
	}
	if p.ThirdDay > 0 {
		params.Add(prefix+"thirdDay", strconv.FormatInt(p.ThirdDay, 10))
	}
	return params
}

// ForecastTouristSummaryList  客流预测汇总列表
type ForecastTouristSummaryList struct {
	Date    int64           `json:"date,omitempty"`
	Summary TouristSummary2 `json:"summary,omitempty"`
}

// Params 将ForecastTouristSummaryList转换为url.Values
func (p ForecastTouristSummaryList) Params(prefix string) url.Values {
	params := url.Values{}
	if p.Date > 0 {
		params.Add(prefix+"date", strconv.FormatInt(p.Date, 10))
	}
	for key, values := range p.Summary.Params(prefix + "summary.") {
		for _, value := range values {
			params.Add(key, value)
		}
	}
	return params
}
