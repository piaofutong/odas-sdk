// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package inout

import (
	"fmt"
	"net/url"
	"strconv"
)

// AuthorizationListReq  授权列表请求
type AuthorizationListReq struct {
	Page     int64 `json:"page,omitempty"`     // 分页
	PageSize int64 `json:"pageSize,omitempty"` // 单页数量
	Granter  int64 `json:"granter,omitempty"`  // 授权人id
	Grantee  int64 `json:"grantee,omitempty"`  // 被授权人id
	GroupId  int64 `json:"groupId,omitempty"`  // 出入园统计组id
}

// Api 返回API路径
func (r *AuthorizationListReq) Api() string {
	params := url.Values{}
	if r.Page > 0 {
		params.Add("page", strconv.FormatInt(r.Page, 10))
	}
	if r.PageSize > 0 {
		params.Add("pageSize", strconv.FormatInt(r.PageSize, 10))
	}
	if r.Granter > 0 {
		params.Add("granter", strconv.FormatInt(r.Granter, 10))
	}
	if r.Grantee > 0 {
		params.Add("grantee", strconv.FormatInt(r.Grantee, 10))
	}
	if r.GroupId > 0 {
		params.Add("groupId", strconv.FormatInt(r.GroupId, 10))
	}
	return fmt.Sprintf("/v5/inout/authorization/list?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *AuthorizationListReq) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *AuthorizationListReq) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *AuthorizationListReq) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *AuthorizationListReq) AuthRequired() bool {
	return true
}

// AuthorizationListResp  授权列表响应
type AuthorizationListResp struct {
	List       []*ListData `json:"list,omitempty"`
	Pagination *Pagination `json:"pagination,omitempty"`
}

// ListData  授权列表数据
type ListData struct {
	Id        int64  `json:"id,omitempty"`        // 出入园统计组授权ID
	Granter   int64  `json:"granter,omitempty"`   // 授权人id
	Grantee   int64  `json:"grantee,omitempty"`   // 被授权人id
	GroupId   int64  `json:"groupId,omitempty"`   // 出入园统计组id
	CreatedAt string `json:"createdAt,omitempty"` // 创建时间
	UpdatedAt string `json:"updatedAt,omitempty"` // 最后更新时间

}

// Params 将ListData转换为url.Values
func (p ListData) Params(prefix string) url.Values {
	params := url.Values{}
	if p.Id > 0 {
		params.Add(prefix+"id", strconv.FormatInt(p.Id, 10))
	}
	if p.Granter > 0 {
		params.Add(prefix+"granter", strconv.FormatInt(p.Granter, 10))
	}
	if p.Grantee > 0 {
		params.Add(prefix+"grantee", strconv.FormatInt(p.Grantee, 10))
	}
	if p.GroupId > 0 {
		params.Add(prefix+"groupId", strconv.FormatInt(p.GroupId, 10))
	}
	if p.CreatedAt != "" {
		params.Add(prefix+"createdAt", p.CreatedAt)
	}
	if p.UpdatedAt != "" {
		params.Add(prefix+"updatedAt", p.UpdatedAt)
	}
	return params
}

// Pagination  分页信息
type Pagination struct {
	Page     int64 `json:"page,omitempty"`     // 分页
	PageSize int64 `json:"pageSize,omitempty"` // 单页大小
	Total    int64 `json:"total,omitempty"`    // 数据总数
	Pages    int64 `json:"pages,omitempty"`    // 分页总数

}

// Params 将Pagination转换为url.Values
func (p Pagination) Params(prefix string) url.Values {
	params := url.Values{}
	if p.Page > 0 {
		params.Add(prefix+"page", strconv.FormatInt(p.Page, 10))
	}
	if p.PageSize > 0 {
		params.Add(prefix+"pageSize", strconv.FormatInt(p.PageSize, 10))
	}
	if p.Total > 0 {
		params.Add(prefix+"total", strconv.FormatInt(p.Total, 10))
	}
	if p.Pages > 0 {
		params.Add(prefix+"pages", strconv.FormatInt(p.Pages, 10))
	}
	return params
}
