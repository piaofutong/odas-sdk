// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package inout

import (
	"fmt"
	"net/url"
	"strconv"
)

// HourSummaryByDeviceReq  按设备小时统计请求
type HourSummaryByDeviceReq struct {
	Date    string   `json:"date,omitempty"`    // 日期
	Sid     int64    `json:"sid,omitempty"`     // 景区id
	Devices []string `json:"devices,omitempty"` // 设备id
	Hour    int64    `json:"hour,omitempty"`    // 小时
}

// Api 返回API路径
func (r *HourSummaryByDeviceReq) Api() string {
	params := url.Values{}
	if r.Date != "" {
		params.Add("date", r.Date)
	}
	if r.Sid > 0 {
		params.Add("sid", strconv.FormatInt(r.Sid, 10))
	}
	if len(r.Devices) > 0 {
		for _, id := range r.Devices {
			params.Add("devices", id)
		}
	}
	if r.Hour > 0 {
		params.Add("hour", strconv.FormatInt(r.Hour, 10))
	}
	return fmt.Sprintf("/v5/inout/stat/g-device-hour/summary?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *HourSummaryByDeviceReq) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *HourSummaryByDeviceReq) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *HourSummaryByDeviceReq) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *HourSummaryByDeviceReq) AuthRequired() bool {
	return true
}

// HourSummaryByDeviceResp  按设备小时统计响应
type HourSummaryByDeviceResp struct {
	Total DeviceSummaryTotal   `json:"total,omitempty"`
	List  []*DeviceSummaryList `json:"list,omitempty"`
}

// DeviceSummaryTotal  闸机出入园汇总数据
type DeviceSummaryTotal struct {
	In       int64 `json:"in,omitempty"`       // 入园数
	Out      int64 `json:"out,omitempty"`      // 出园数
	Hold     int64 `json:"hold,omitempty"`     // 在园人数
	Employee int64 `json:"employee,omitempty"` // 员工卡入园数

}

// Params 将DeviceSummaryTotal转换为url.Values
func (p DeviceSummaryTotal) Params(prefix string) url.Values {
	params := url.Values{}
	if p.In > 0 {
		params.Add(prefix+"in", strconv.FormatInt(p.In, 10))
	}
	if p.Out > 0 {
		params.Add(prefix+"out", strconv.FormatInt(p.Out, 10))
	}
	if p.Hold > 0 {
		params.Add(prefix+"hold", strconv.FormatInt(p.Hold, 10))
	}
	if p.Employee > 0 {
		params.Add(prefix+"employee", strconv.FormatInt(p.Employee, 10))
	}
	return params
}

// DeviceSummaryList  闸机出入园数据
type DeviceSummaryList struct {
	In       int64  `json:"in,omitempty"`
	Out      int64  `json:"out,omitempty"`
	Device   string `json:"device,omitempty"`
	Employee int64  `json:"employee,omitempty"`
}

// Params 将DeviceSummaryList转换为url.Values
func (p DeviceSummaryList) Params(prefix string) url.Values {
	params := url.Values{}
	if p.In > 0 {
		params.Add(prefix+"in", strconv.FormatInt(p.In, 10))
	}
	if p.Out > 0 {
		params.Add(prefix+"out", strconv.FormatInt(p.Out, 10))
	}
	if p.Device != "" {
		params.Add(prefix+"device", p.Device)
	}
	if p.Employee > 0 {
		params.Add(prefix+"employee", strconv.FormatInt(p.Employee, 10))
	}
	return params
}
