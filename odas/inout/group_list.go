// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package inout

import (
	"fmt"
	"github.com/piaofutong/odas-sdk/odas/common"
	"net/url"
	"strconv"
)

// GroupListReq  统计组列表请求
type GroupListReq struct {
	Page  common.Page `json:"page,omitempty"`  // 分页信息
	Sid   int64       `json:"sid,omitempty"`   // 景区id
	Owner bool        `json:"owner,omitempty"` // 是否只包含自己创建的统计组
}

// Api 返回API路径
func (r *GroupListReq) Api() string {
	params := url.Values{}
	for key, values := range r.Page.Params("page.") {
		for _, value := range values {
			params.Add(key, value)
		}
	}
	if r.Sid > 0 {
		params.Add("sid", strconv.FormatInt(r.Sid, 10))
	}
	if r.Owner {
		params.Add("owner", "true")
	}
	return fmt.Sprintf("/v5/inout/group/list?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *GroupListReq) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *GroupListReq) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *GroupListReq) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *GroupListReq) AuthRequired() bool {
	return true
}

// GroupListResp  统计组列表响应
type GroupListResp struct {
	Page common.Pagination   `json:"page,omitempty"` // 分页信息
	List []*GroupGetResponse `json:"list,omitempty"`
}

// GroupGetResponse  获取统计组响应
type GroupGetResponse struct {
	Id         int64          `json:"id,omitempty"`         // 出入园统计组ID
	Sid        int64          `json:"sid,omitempty"`        // 景区id
	SerialNo   string         `json:"serialNo,omitempty"`   // 统计组序列号
	Name       string         `json:"name,omitempty"`       // 统计组名称
	Gates      []string       `json:"gates,omitempty"`      // 闸机key列表， 例如["a","b"]
	Capacity   int64          `json:"capacity,omitempty"`   // 瞬时承载量
	UpperLimit int64          `json:"upperLimit,omitempty"` // 上限
	Config     []*GroupConfig `json:"config,omitempty"`     // 客流配置
	ExtConfig  GroupExtConfig `json:"extConfig,omitempty"`  // 出入园统计组扩展配置
	CreatedAt  string         `json:"createdAt,omitempty"`  // 创建时间
	UpdatedAt  string         `json:"updatedAt,omitempty"`  // 最后更新时间

}

// Params 将GroupGetResponse转换为url.Values
func (p GroupGetResponse) Params(prefix string) url.Values {
	params := url.Values{}
	if p.Id > 0 {
		params.Add(prefix+"id", strconv.FormatInt(p.Id, 10))
	}
	if p.Sid > 0 {
		params.Add(prefix+"sid", strconv.FormatInt(p.Sid, 10))
	}
	if p.SerialNo != "" {
		params.Add(prefix+"serialNo", p.SerialNo)
	}
	if p.Name != "" {
		params.Add(prefix+"name", p.Name)
	}
	if len(p.Gates) > 0 {
		for _, item := range p.Gates {
			params.Add(prefix+"gates", item)
		}
	}
	if p.Capacity > 0 {
		params.Add(prefix+"capacity", strconv.FormatInt(p.Capacity, 10))
	}
	if p.UpperLimit > 0 {
		params.Add(prefix+"upperLimit", strconv.FormatInt(p.UpperLimit, 10))
	}
	if len(p.Config) > 0 {
		for _, item := range p.Config {
			params.Add(prefix+"config", fmt.Sprintf("%v", item))
		}
	}
	for key, values := range p.ExtConfig.Params(prefix + "extConfig.") {
		for _, value := range values {
			params.Add(key, value)
		}
	}
	if p.CreatedAt != "" {
		params.Add(prefix+"createdAt", p.CreatedAt)
	}
	if p.UpdatedAt != "" {
		params.Add(prefix+"updatedAt", p.UpdatedAt)
	}
	return params
}

// GroupConfig  客流配置
type GroupConfig struct {
	Label string `json:"label,omitempty"` // 显示名称
	Min   int64  `json:"min,omitempty"`   // 客流配置匹配最小客流比例(百分比)
	Max   int64  `json:"max,omitempty"`   // 客流配置匹配最大客流比例(百分比)
	Color string `json:"color,omitempty"` // 显示颜色

}

// Params 将GroupConfig转换为url.Values
func (p GroupConfig) Params(prefix string) url.Values {
	params := url.Values{}
	if p.Label != "" {
		params.Add(prefix+"label", p.Label)
	}
	if p.Min > 0 {
		params.Add(prefix+"min", strconv.FormatInt(p.Min, 10))
	}
	if p.Max > 0 {
		params.Add(prefix+"max", strconv.FormatInt(p.Max, 10))
	}
	if p.Color != "" {
		params.Add(prefix+"color", p.Color)
	}
	return params
}

// GroupExtConfig  出入园统计组扩展配置
type GroupExtConfig struct {
	ContainsEmployee bool `json:"containsEmployee,omitempty"` // 是否包含员工卡

}

// Params 将GroupExtConfig转换为url.Values
func (p GroupExtConfig) Params(prefix string) url.Values {
	params := url.Values{}
	if p.ContainsEmployee {
		params.Add(prefix+"containsEmployee", strconv.FormatBool(p.ContainsEmployee))
	}
	return params
}
