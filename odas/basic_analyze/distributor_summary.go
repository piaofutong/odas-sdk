// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package basic_analyze

import (
	"fmt"
	"github.com/piaofutong/odas-sdk/odas/common"
	"net/url"
	"strconv"
)

// DistributorSummaryReq  分销商汇总请求
type DistributorSummaryReq struct {
	Request  common.PassedTimeSpanRequest `json:"request,omitempty"`
	Page     int64                        `json:"page,omitempty"`
	PageSize int64                        `json:"pageSize,omitempty"`
}

// Api 返回API路径
func (r *DistributorSummaryReq) Api() string {
	params := url.Values{}

	requestParams := r.Request.Params("")
	for key, values := range requestParams {
		for _, value := range values {
			params.Add(key, value)
		}
	}

	if r.Page > 0 {
		params.Add("page", strconv.FormatInt(r.Page, 10))
	}
	if r.PageSize > 0 {
		params.Add("pageSize", strconv.FormatInt(r.PageSize, 10))
	}
	return fmt.Sprintf("/v5/basic_analyze/report/g-distributor/summary?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *DistributorSummaryReq) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *DistributorSummaryReq) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *DistributorSummaryReq) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *DistributorSummaryReq) AuthRequired() bool {
	return true
}

// DistributorSummaryResp  分销商汇总响应
type DistributorSummaryResp struct {
	List       []*DistributorSummaryList `json:"list,omitempty"`
	Pagination common.Pagination         `json:"pagination,omitempty"`
}

// DistributorSummaryList  分销商汇总列表
type DistributorSummaryList struct {
	DistributorId   int64              `json:"distributorId,omitempty"`
	DistributorName string             `json:"distributorName,omitempty"`
	Summary         DistributorSummary `json:"summary,omitempty"`
}

// Params 将DistributorSummaryList转换为url.Values
func (p DistributorSummaryList) Params(prefix string) url.Values {
	params := url.Values{}
	if p.DistributorId > 0 {
		params.Add(prefix+"distributorId", strconv.FormatInt(p.DistributorId, 10))
	}
	if p.DistributorName != "" {
		params.Add(prefix+"distributorName", p.DistributorName)
	}
	for key, values := range p.Summary.Params(prefix + "summary.") {
		for _, value := range values {
			params.Add(key, value)
		}
	}
	return params
}

// DistributorSummary  分销商汇总
type DistributorSummary struct {
	PaidAmount        int64 `json:"paidAmount,omitempty"`
	PaidTicketCount   int64 `json:"paidTicketCount,omitempty"`
	VerifyAmount      int64 `json:"verifyAmount,omitempty"`
	VerifyTicketCount int64 `json:"verifyTicketCount,omitempty"`
	CancelAmount      int64 `json:"cancelAmount,omitempty"`
	CancelTicketCount int64 `json:"cancelTicketCount,omitempty"`
}

// Params 将DistributorSummary转换为url.Values
func (p DistributorSummary) Params(prefix string) url.Values {
	params := url.Values{}
	if p.PaidAmount > 0 {
		params.Add(prefix+"paidAmount", strconv.FormatInt(p.PaidAmount, 10))
	}
	if p.PaidTicketCount > 0 {
		params.Add(prefix+"paidTicketCount", strconv.FormatInt(p.PaidTicketCount, 10))
	}
	if p.VerifyAmount > 0 {
		params.Add(prefix+"verifyAmount", strconv.FormatInt(p.VerifyAmount, 10))
	}
	if p.VerifyTicketCount > 0 {
		params.Add(prefix+"verifyTicketCount", strconv.FormatInt(p.VerifyTicketCount, 10))
	}
	if p.CancelAmount > 0 {
		params.Add(prefix+"cancelAmount", strconv.FormatInt(p.CancelAmount, 10))
	}
	if p.CancelTicketCount > 0 {
		params.Add(prefix+"cancelTicketCount", strconv.FormatInt(p.CancelTicketCount, 10))
	}
	return params
}
