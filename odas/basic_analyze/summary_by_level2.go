// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package basic_analyze

import (
	"fmt"
	"github.com/piaofutong/odas-sdk/odas/common"
	"github.com/piaofutong/odas-sdk/odas/types"
	"net/url"
	"strconv"
)

// SummaryByLevel2Req  二级渠道汇总请求
type SummaryByLevel2Req struct {
	Request         *common.PassedTimeSpanV4Request `json:"request,omitempty"`
	Limit           int64                           `json:"limit,omitempty"`
	OrderType       types.OrderType                 `json:"orderType,omitempty"`       // 订单类型
	ChannelLevel1Id int64                           `json:"channelLevel1Id,omitempty"` // 一级渠道id
}

// Api 返回API路径
func (r *SummaryByLevel2Req) Api() string {
	params := url.Values{}
	if r.Request != nil {
		requestParams := r.Request.Params("")
		for key, values := range requestParams {
			for _, value := range values {
				params.Add(key, value)
			}
		}
	}

	if r.Limit > 0 {
		params.Add("limit", strconv.FormatInt(r.Limit, 10))
	}
	if r.OrderType > 0 {
		params.Add("orderType", strconv.FormatInt(int64(r.OrderType), 10))
	}
	if r.ChannelLevel1Id > 0 {
		params.Add("channelLevel1Id", strconv.FormatInt(r.ChannelLevel1Id, 10))
	}
	return fmt.Sprintf("/v5/basic_analyze/channel/g-level2/summary?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *SummaryByLevel2Req) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *SummaryByLevel2Req) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *SummaryByLevel2Req) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *SummaryByLevel2Req) AuthRequired() bool {
	return true
}

// SummaryByLevel2Resp  按二级渠道汇总响应
type SummaryByLevel2Resp struct {
	Total ChannelSummary         `json:"total,omitempty"`
	List  []*SummaryByLevel2List `json:"list,omitempty"`
}

// SummaryByLevel2List  二级渠道汇总列表
type SummaryByLevel2List struct {
	ChannelLevel2Id   int64          `json:"channelLevel2Id,omitempty"`
	ChannelLevel2Name string         `json:"channelLevel2Name,omitempty"`
	Summary           ChannelSummary `json:"summary,omitempty"`
	TicketCountRate   float64        `json:"ticketCountRate,omitempty"`
}

// Params 将SummaryByLevel2List转换为url.Values
func (p SummaryByLevel2List) Params(prefix string) url.Values {
	params := url.Values{}
	if p.ChannelLevel2Id > 0 {
		params.Add(prefix+"channelLevel2Id", strconv.FormatInt(p.ChannelLevel2Id, 10))
	}
	if p.ChannelLevel2Name != "" {
		params.Add(prefix+"channelLevel2Name", p.ChannelLevel2Name)
	}
	for key, values := range p.Summary.Params(prefix + "summary.") {
		for _, value := range values {
			params.Add(key, value)
		}
	}
	if p.TicketCountRate > 0 {
		params.Add(prefix+"ticketCountRate", fmt.Sprintf("%v", p.TicketCountRate))
	}
	return params
}
