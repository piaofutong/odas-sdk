// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package basic_analyze

import (
	"fmt"
	"net/url"
	"strconv"
)

// TodayTicketingReq  今日分时预约请求
type TodayTicketingReq struct {
	Lid []int64 `json:"lid,omitempty"`
}

// Api 返回API路径
func (r *TodayTicketingReq) Api() string {
	params := url.Values{}
	if len(r.Lid) > 0 {
		for _, id := range r.Lid {
			params.Add("lid", strconv.FormatInt(id, 10))
		}
	}
	return fmt.Sprintf("/v5/basic_analyze/section/today-ticketing-detail?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *TodayTicketingReq) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *TodayTicketingReq) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *TodayTicketingReq) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *TodayTicketingReq) AuthRequired() bool {
	return true
}

// TodayTicketingResp  今日分时预约响应
type TodayTicketingResp struct {
	List []*TicketingList `json:"list,omitempty"`
}

// TicketingList  分时预约列表
type TicketingList struct {
	BeginDate               string   `json:"beginDate,omitempty"`
	BeginTime               string   `json:"beginTime,omitempty"`
	EndDate                 string   `json:"endDate,omitempty"`
	EndTime                 string   `json:"endTime,omitempty"`
	ReservedStorage         int64    `json:"reservedStorage,omitempty"`
	RuleId                  int64    `json:"ruleId,omitempty"`
	RuleName                string   `json:"ruleName,omitempty"`
	SectionAheadCheckInTime int64    `json:"sectionAheadCheckInTime,omitempty"`
	SectionDelayCheckInTime int64    `json:"sectionDelayCheckInTime,omitempty"`
	SectionTimeId           int64    `json:"sectionTimeId,omitempty"`
	Shop                    string   `json:"shop,omitempty"`
	SoldStorage             int64    `json:"soldStorage,omitempty"`
	TicketGroup             int64    `json:"ticketGroup,omitempty"`
	TicketIds               []int64  `json:"ticketIds,omitempty"`
	TicketNames             []string `json:"ticketNames,omitempty"`
	TotalStorage            int64    `json:"totalStorage,omitempty"`
}

// Params 将TicketingList转换为url.Values
func (p TicketingList) Params(prefix string) url.Values {
	params := url.Values{}
	if p.BeginDate != "" {
		params.Add(prefix+"beginDate", p.BeginDate)
	}
	if p.BeginTime != "" {
		params.Add(prefix+"beginTime", p.BeginTime)
	}
	if p.EndDate != "" {
		params.Add(prefix+"endDate", p.EndDate)
	}
	if p.EndTime != "" {
		params.Add(prefix+"endTime", p.EndTime)
	}
	if p.ReservedStorage > 0 {
		params.Add(prefix+"reservedStorage", strconv.FormatInt(p.ReservedStorage, 10))
	}
	if p.RuleId > 0 {
		params.Add(prefix+"ruleId", strconv.FormatInt(p.RuleId, 10))
	}
	if p.RuleName != "" {
		params.Add(prefix+"ruleName", p.RuleName)
	}
	if p.SectionAheadCheckInTime > 0 {
		params.Add(prefix+"sectionAheadCheckInTime", strconv.FormatInt(p.SectionAheadCheckInTime, 10))
	}
	if p.SectionDelayCheckInTime > 0 {
		params.Add(prefix+"sectionDelayCheckInTime", strconv.FormatInt(p.SectionDelayCheckInTime, 10))
	}
	if p.SectionTimeId > 0 {
		params.Add(prefix+"sectionTimeId", strconv.FormatInt(p.SectionTimeId, 10))
	}
	if p.Shop != "" {
		params.Add(prefix+"shop", p.Shop)
	}
	if p.SoldStorage > 0 {
		params.Add(prefix+"soldStorage", strconv.FormatInt(p.SoldStorage, 10))
	}
	if p.TicketGroup > 0 {
		params.Add(prefix+"ticketGroup", strconv.FormatInt(p.TicketGroup, 10))
	}
	if len(p.TicketIds) > 0 {
		for _, item := range p.TicketIds {
			params.Add(prefix+"ticketIds", strconv.FormatInt(item, 10))
		}
	}
	if len(p.TicketNames) > 0 {
		for _, item := range p.TicketNames {
			params.Add(prefix+"ticketNames", item)
		}
	}
	if p.TotalStorage > 0 {
		params.Add(prefix+"totalStorage", strconv.FormatInt(p.TotalStorage, 10))
	}
	return params
}
