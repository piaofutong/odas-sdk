// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package basic_analyze

import (
	"fmt"
	"github.com/piaofutong/odas-sdk/odas/common"
	"github.com/piaofutong/odas-sdk/odas/types"
	"net/url"
	"strconv"
)

// OrderSummaryByYMDReq  按年月日汇总订单请求
type OrderSummaryByYMDReq struct {
	Request   common.PassedTimeSpanV4Request `json:"request,omitempty"`
	Limit     int64                          `json:"limit,omitempty"`     // 获取数据条数
	OrderType types.OrderType                `json:"orderType,omitempty"` // 订单类型
}

// Api 返回API路径
func (r *OrderSummaryByYMDReq) Api() string {
	params := url.Values{}

	requestParams := r.Request.Params("")
	for key, values := range requestParams {
		for _, value := range values {
			params.Add(key, value)
		}
	}

	if r.Limit > 0 {
		params.Add("limit", strconv.FormatInt(r.Limit, 10))
	}
	if r.OrderType > 0 {
		params.Add("orderType", strconv.FormatInt(int64(r.OrderType), 10))
	}
	return fmt.Sprintf("/v5/basic_analyze/report/g-ymd/order-summary?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *OrderSummaryByYMDReq) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *OrderSummaryByYMDReq) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *OrderSummaryByYMDReq) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *OrderSummaryByYMDReq) AuthRequired() bool {
	return true
}

// OrderSummaryByYMDResp  按年月日汇总订单响应
type OrderSummaryByYMDResp struct {
	Total OrderSummary             `json:"total,omitempty"`
	List  []*OrderSummaryByYMDList `json:"list,omitempty"`
}

// OrderSummaryByYMDList  按年月日汇总订单列表
type OrderSummaryByYMDList struct {
	Date        string       `json:"date,omitempty"`
	Summary     OrderSummary `json:"summary,omitempty"`
	CompareRate OrderSummary `json:"compareRate,omitempty"`
}

// Params 将OrderSummaryByYMDList转换为url.Values
func (p OrderSummaryByYMDList) Params(prefix string) url.Values {
	params := url.Values{}
	if p.Date != "" {
		params.Add(prefix+"date", p.Date)
	}
	for key, values := range p.Summary.Params(prefix + "summary.") {
		for _, value := range values {
			params.Add(key, value)
		}
	}
	for key, values := range p.CompareRate.Params(prefix + "compareRate.") {
		for _, value := range values {
			params.Add(key, value)
		}
	}
	return params
}
