// Code generated by sdk-generator. DO NOT EDIT.
// 此文件由代码生成器自动生成，请勿手动修改

package basic_analyze

import (
	"fmt"
	"github.com/piaofutong/odas-sdk/odas/common"
	"github.com/piaofutong/odas-sdk/odas/types"
	"net/url"
	"strconv"
)

// SummaryByLevel2AndTicketReq  按二级渠道和票汇总请求
type SummaryByLevel2AndTicketReq struct {
	Request         *common.PassedTimeSpanV4Request `json:"request,omitempty"`
	Limit           int64                           `json:"limit,omitempty"`
	ExcludePtype    []string                        `json:"excludePtype,omitempty"`
	OrderType       types.OrderType                 `json:"orderType,omitempty"`
	ChannelLevel1Id int64                           `json:"channelLevel1Id,omitempty"`
}

// Api 返回API路径
func (r *SummaryByLevel2AndTicketReq) Api() string {
	params := url.Values{}
	if r.Request != nil {
		requestParams := r.Request.Params("")
		for key, values := range requestParams {
			for _, value := range values {
				params.Add(key, value)
			}
		}
	}

	if r.Limit > 0 {
		params.Add("limit", strconv.FormatInt(r.Limit, 10))
	}
	if len(r.ExcludePtype) > 0 {
		for _, id := range r.ExcludePtype {
			params.Add("excludePtype", id)
		}
	}
	if r.OrderType > 0 {
		params.Add("orderType", strconv.FormatInt(int64(r.OrderType), 10))
	}
	if r.ChannelLevel1Id > 0 {
		params.Add("channelLevel1Id", strconv.FormatInt(r.ChannelLevel1Id, 10))
	}
	return fmt.Sprintf("/v5/basic_analyze/channel/g-level2-ticket/summary?%s", params.Encode())

}

// Method 返回HTTP方法
func (r *SummaryByLevel2AndTicketReq) Method() string {
	return "GET"
}

// Body 返回请求体
func (r *SummaryByLevel2AndTicketReq) Body() []byte {
	return nil

}

// ContentType 返回内容类型
func (r *SummaryByLevel2AndTicketReq) ContentType() string {
	return "application/json"
}

// AuthRequired 返回是否需要认证
func (r *SummaryByLevel2AndTicketReq) AuthRequired() bool {
	return true
}

// SummaryByLevel2AndTicketResp  按二级渠道和票汇总响应
type SummaryByLevel2AndTicketResp struct {
	List []*SummaryByLevel2AndTicketList `json:"list,omitempty"`
}

// SummaryByLevel2AndTicketList  按二级渠道和票汇总列表
type SummaryByLevel2AndTicketList struct {
	ChannelLevel2Id   int64          `json:"channelLevel2Id,omitempty"`
	ChannelLevel2Name string         `json:"channelLevel2Name,omitempty"`
	TicketId          int64          `json:"ticketId,omitempty"`
	TicketName        string         `json:"ticketName,omitempty"`
	Summary           ChannelSummary `json:"summary,omitempty"`
}

// Params 将SummaryByLevel2AndTicketList转换为url.Values
func (p SummaryByLevel2AndTicketList) Params(prefix string) url.Values {
	params := url.Values{}
	if p.ChannelLevel2Id > 0 {
		params.Add(prefix+"channelLevel2Id", strconv.FormatInt(p.ChannelLevel2Id, 10))
	}
	if p.ChannelLevel2Name != "" {
		params.Add(prefix+"channelLevel2Name", p.ChannelLevel2Name)
	}
	if p.TicketId > 0 {
		params.Add(prefix+"ticketId", strconv.FormatInt(p.TicketId, 10))
	}
	if p.TicketName != "" {
		params.Add(prefix+"ticketName", p.TicketName)
	}
	for key, values := range p.Summary.Params(prefix + "summary.") {
		for _, value := range values {
			params.Add(key, value)
		}
	}
	return params
}
